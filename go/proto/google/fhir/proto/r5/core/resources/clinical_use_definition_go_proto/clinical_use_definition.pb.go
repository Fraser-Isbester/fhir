//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/clinical_use_definition.proto

package clinical_use_definition_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for ClinicalUseDefinition.
// A single issue - either an indication, contraindication, interaction or an
// undesirable effect for a medicinal product, medication, device or procedure.
// See http://hl7.org/fhir/StructureDefinition/ClinicalUseDefinition
type ClinicalUseDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this issue
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Type       *ClinicalUseDefinition_TypeCode  `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// A categorisation of the issue, primarily for dividing warnings into subject
	// heading areas such as "Pregnancy", "Overdose"
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// The medication, product, substance, device, procedure etc. for which this
	// is an indication
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=subject,proto3" json:"subject,omitempty"`
	// Whether this is a current issue or one that has been retired etc
	Status           *datatypes_go_proto.CodeableConcept     `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Contraindication *ClinicalUseDefinition_Contraindication `protobuf:"bytes,15,opt,name=contraindication,proto3" json:"contraindication,omitempty"`
	Indication       *ClinicalUseDefinition_Indication       `protobuf:"bytes,16,opt,name=indication,proto3" json:"indication,omitempty"`
	Interaction      *ClinicalUseDefinition_Interaction      `protobuf:"bytes,17,opt,name=interaction,proto3" json:"interaction,omitempty"`
	// The population group to which this applies
	Population []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=population,proto3" json:"population,omitempty"`
	// Logic used by the clinical use definition
	Library           []*datatypes_go_proto.Canonical          `protobuf:"bytes,19,rep,name=library,proto3" json:"library,omitempty"`
	UndesirableEffect *ClinicalUseDefinition_UndesirableEffect `protobuf:"bytes,20,opt,name=undesirable_effect,json=undesirableEffect,proto3" json:"undesirable_effect,omitempty"`
	Warning           *ClinicalUseDefinition_Warning           `protobuf:"bytes,21,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *ClinicalUseDefinition) Reset() {
	*x = ClinicalUseDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition) ProtoMessage() {}

func (x *ClinicalUseDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0}
}

func (x *ClinicalUseDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ClinicalUseDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ClinicalUseDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ClinicalUseDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ClinicalUseDefinition) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ClinicalUseDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ClinicalUseDefinition) GetType() *ClinicalUseDefinition_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClinicalUseDefinition) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ClinicalUseDefinition) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ClinicalUseDefinition) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClinicalUseDefinition) GetContraindication() *ClinicalUseDefinition_Contraindication {
	if x != nil {
		return x.Contraindication
	}
	return nil
}

func (x *ClinicalUseDefinition) GetIndication() *ClinicalUseDefinition_Indication {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *ClinicalUseDefinition) GetInteraction() *ClinicalUseDefinition_Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *ClinicalUseDefinition) GetPopulation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *ClinicalUseDefinition) GetLibrary() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.Library
	}
	return nil
}

func (x *ClinicalUseDefinition) GetUndesirableEffect() *ClinicalUseDefinition_UndesirableEffect {
	if x != nil {
		return x.UndesirableEffect
	}
	return nil
}

func (x *ClinicalUseDefinition) GetWarning() *ClinicalUseDefinition_Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

// indication | contraindication | interaction | undesirable-effect | warning
type ClinicalUseDefinition_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ClinicalUseDefinitionTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ClinicalUseDefinitionTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClinicalUseDefinition_TypeCode) Reset() {
	*x = ClinicalUseDefinition_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_TypeCode) ProtoMessage() {}

func (x *ClinicalUseDefinition_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_TypeCode.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClinicalUseDefinition_TypeCode) GetValue() codes_go_proto.ClinicalUseDefinitionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ClinicalUseDefinitionTypeCode_Value(0)
}

func (x *ClinicalUseDefinition_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specifics for when this is a contraindication
type ClinicalUseDefinition_Contraindication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation that is being documented as contraindicating against this
	// item
	DiseaseSymptomProcedure *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=disease_symptom_procedure,json=diseaseSymptomProcedure,proto3" json:"disease_symptom_procedure,omitempty"`
	// The status of the disease or symptom for the contraindication
	DiseaseStatus *datatypes_go_proto.CodeableReference `protobuf:"bytes,5,opt,name=disease_status,json=diseaseStatus,proto3" json:"disease_status,omitempty"`
	// A comorbidity (concurrent condition) or coinfection
	Comorbidity []*datatypes_go_proto.CodeableReference `protobuf:"bytes,6,rep,name=comorbidity,proto3" json:"comorbidity,omitempty"`
	// The indication which this is a contraidication for
	Indication []*datatypes_go_proto.Reference `protobuf:"bytes,7,rep,name=indication,proto3" json:"indication,omitempty"`
	// An expression that returns true or false, indicating whether the
	// indication is applicable or not, after having applied its other elements
	Applicability *datatypes_go_proto.Expression                         `protobuf:"bytes,8,opt,name=applicability,proto3" json:"applicability,omitempty"`
	OtherTherapy  []*ClinicalUseDefinition_Contraindication_OtherTherapy `protobuf:"bytes,9,rep,name=other_therapy,json=otherTherapy,proto3" json:"other_therapy,omitempty"`
}

func (x *ClinicalUseDefinition_Contraindication) Reset() {
	*x = ClinicalUseDefinition_Contraindication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Contraindication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Contraindication) ProtoMessage() {}

func (x *ClinicalUseDefinition_Contraindication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Contraindication.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Contraindication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClinicalUseDefinition_Contraindication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetDiseaseSymptomProcedure() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.DiseaseSymptomProcedure
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetDiseaseStatus() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.DiseaseStatus
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetComorbidity() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Comorbidity
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetIndication() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetApplicability() *datatypes_go_proto.Expression {
	if x != nil {
		return x.Applicability
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication) GetOtherTherapy() []*ClinicalUseDefinition_Contraindication_OtherTherapy {
	if x != nil {
		return x.OtherTherapy
	}
	return nil
}

// Specifics for when this is an indication
type ClinicalUseDefinition_Indication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation that is being documented as an indicaton for this item
	DiseaseSymptomProcedure *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=disease_symptom_procedure,json=diseaseSymptomProcedure,proto3" json:"disease_symptom_procedure,omitempty"`
	// The status of the disease or symptom for the indication
	DiseaseStatus *datatypes_go_proto.CodeableReference `protobuf:"bytes,5,opt,name=disease_status,json=diseaseStatus,proto3" json:"disease_status,omitempty"`
	// A comorbidity or coinfection as part of the indication
	Comorbidity []*datatypes_go_proto.CodeableReference `protobuf:"bytes,6,rep,name=comorbidity,proto3" json:"comorbidity,omitempty"`
	// The intended effect, aim or strategy to be achieved
	IntendedEffect *datatypes_go_proto.CodeableReference       `protobuf:"bytes,7,opt,name=intended_effect,json=intendedEffect,proto3" json:"intended_effect,omitempty"`
	Duration       *ClinicalUseDefinition_Indication_DurationX `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// An unwanted side effect or negative outcome of the subject of this
	// resource when being used for this indication
	UndesirableEffect []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=undesirable_effect,json=undesirableEffect,proto3" json:"undesirable_effect,omitempty"`
	// An expression that returns true or false, indicating whether the
	// indication is applicable or not, after having applied its other elements
	Applicability *datatypes_go_proto.Expression `protobuf:"bytes,10,opt,name=applicability,proto3" json:"applicability,omitempty"`
	// The use of the medicinal product in relation to other therapies described
	// as part of the indication
	OtherTherapy []*ClinicalUseDefinition_Contraindication_OtherTherapy `protobuf:"bytes,11,rep,name=other_therapy,json=otherTherapy,proto3" json:"other_therapy,omitempty"`
}

func (x *ClinicalUseDefinition_Indication) Reset() {
	*x = ClinicalUseDefinition_Indication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Indication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Indication) ProtoMessage() {}

func (x *ClinicalUseDefinition_Indication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Indication.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Indication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClinicalUseDefinition_Indication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetDiseaseSymptomProcedure() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.DiseaseSymptomProcedure
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetDiseaseStatus() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.DiseaseStatus
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetComorbidity() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Comorbidity
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetIntendedEffect() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.IntendedEffect
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetDuration() *ClinicalUseDefinition_Indication_DurationX {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetUndesirableEffect() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UndesirableEffect
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetApplicability() *datatypes_go_proto.Expression {
	if x != nil {
		return x.Applicability
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication) GetOtherTherapy() []*ClinicalUseDefinition_Contraindication_OtherTherapy {
	if x != nil {
		return x.OtherTherapy
	}
	return nil
}

// Specifics for when this is an interaction
type ClinicalUseDefinition_Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Interactant       []*ClinicalUseDefinition_Interaction_Interactant `protobuf:"bytes,4,rep,name=interactant,proto3" json:"interactant,omitempty"`
	// The type of the interaction e.g. drug-drug interaction, drug-lab test
	// interaction
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The effect of the interaction, for example "reduced gastric absorption of
	// primary medication"
	Effect *datatypes_go_proto.CodeableReference `protobuf:"bytes,6,opt,name=effect,proto3" json:"effect,omitempty"`
	// The incidence of the interaction, e.g. theoretical, observed
	Incidence *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=incidence,proto3" json:"incidence,omitempty"`
	// Actions for managing the interaction
	Management []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=management,proto3" json:"management,omitempty"`
}

func (x *ClinicalUseDefinition_Interaction) Reset() {
	*x = ClinicalUseDefinition_Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Interaction) ProtoMessage() {}

func (x *ClinicalUseDefinition_Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Interaction.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Interaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClinicalUseDefinition_Interaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetInteractant() []*ClinicalUseDefinition_Interaction_Interactant {
	if x != nil {
		return x.Interactant
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetEffect() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetIncidence() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Incidence
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction) GetManagement() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Management
	}
	return nil
}

// A possible negative outcome from the use of this treatment
type ClinicalUseDefinition_UndesirableEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation in which the undesirable effect may manifest
	SymptomConditionEffect *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=symptom_condition_effect,json=symptomConditionEffect,proto3" json:"symptom_condition_effect,omitempty"`
	// High level classification of the effect
	Classification *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=classification,proto3" json:"classification,omitempty"`
	// How often the effect is seen
	FrequencyOfOccurrence *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=frequency_of_occurrence,json=frequencyOfOccurrence,proto3" json:"frequency_of_occurrence,omitempty"`
}

func (x *ClinicalUseDefinition_UndesirableEffect) Reset() {
	*x = ClinicalUseDefinition_UndesirableEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_UndesirableEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_UndesirableEffect) ProtoMessage() {}

func (x *ClinicalUseDefinition_UndesirableEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_UndesirableEffect.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_UndesirableEffect) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetSymptomConditionEffect() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.SymptomConditionEffect
	}
	return nil
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetClassification() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ClinicalUseDefinition_UndesirableEffect) GetFrequencyOfOccurrence() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FrequencyOfOccurrence
	}
	return nil
}

// Critical environmental, health or physical risks or hazards. For example
// 'Do not operate heavy machinery', 'May cause drowsiness'
type ClinicalUseDefinition_Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A textual definition of this warning, with formatting
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// A coded or unformatted textual definition of this warning
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ClinicalUseDefinition_Warning) Reset() {
	*x = ClinicalUseDefinition_Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Warning) ProtoMessage() {}

func (x *ClinicalUseDefinition_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Warning.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Warning) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ClinicalUseDefinition_Warning) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Warning) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Warning) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Warning) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ClinicalUseDefinition_Warning) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

// Information about use of the product in relation to other therapies
// described as part of the contraindication
type ClinicalUseDefinition_Contraindication_OtherTherapy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of relationship between the product
	// indication/contraindication and another therapy
	RelationshipType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"`
	// Reference to a specific medication, substance etc. as part of an
	// indication or contraindication
	Treatment *datatypes_go_proto.CodeableReference `protobuf:"bytes,5,opt,name=treatment,proto3" json:"treatment,omitempty"`
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) Reset() {
	*x = ClinicalUseDefinition_Contraindication_OtherTherapy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Contraindication_OtherTherapy) ProtoMessage() {}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Contraindication_OtherTherapy.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Contraindication_OtherTherapy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) GetRelationshipType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.RelationshipType
	}
	return nil
}

func (x *ClinicalUseDefinition_Contraindication_OtherTherapy) GetTreatment() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Treatment
	}
	return nil
}

// Timing or duration information
type ClinicalUseDefinition_Indication_DurationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ClinicalUseDefinition_Indication_DurationX_Range
	//	*ClinicalUseDefinition_Indication_DurationX_StringValue
	Choice isClinicalUseDefinition_Indication_DurationX_Choice `protobuf_oneof:"choice"`
}

func (x *ClinicalUseDefinition_Indication_DurationX) Reset() {
	*x = ClinicalUseDefinition_Indication_DurationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Indication_DurationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Indication_DurationX) ProtoMessage() {}

func (x *ClinicalUseDefinition_Indication_DurationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Indication_DurationX.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Indication_DurationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *ClinicalUseDefinition_Indication_DurationX) GetChoice() isClinicalUseDefinition_Indication_DurationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication_DurationX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*ClinicalUseDefinition_Indication_DurationX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ClinicalUseDefinition_Indication_DurationX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*ClinicalUseDefinition_Indication_DurationX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isClinicalUseDefinition_Indication_DurationX_Choice interface {
	isClinicalUseDefinition_Indication_DurationX_Choice()
}

type ClinicalUseDefinition_Indication_DurationX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type ClinicalUseDefinition_Indication_DurationX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*ClinicalUseDefinition_Indication_DurationX_Range) isClinicalUseDefinition_Indication_DurationX_Choice() {
}

func (*ClinicalUseDefinition_Indication_DurationX_StringValue) isClinicalUseDefinition_Indication_DurationX_Choice() {
}

// The specific medication, product, food etc. or laboratory test that
// interacts
type ClinicalUseDefinition_Interaction_Interactant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                      `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *ClinicalUseDefinition_Interaction_Interactant_ItemX `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ClinicalUseDefinition_Interaction_Interactant) Reset() {
	*x = ClinicalUseDefinition_Interaction_Interactant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Interaction_Interactant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Interaction_Interactant) ProtoMessage() {}

func (x *ClinicalUseDefinition_Interaction_Interactant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Interaction_Interactant.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Interaction_Interactant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ClinicalUseDefinition_Interaction_Interactant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction_Interactant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction_Interactant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction_Interactant) GetItem() *ClinicalUseDefinition_Interaction_Interactant_ItemX {
	if x != nil {
		return x.Item
	}
	return nil
}

// The specific medication, product, food etc. or laboratory test that
// interacts
type ClinicalUseDefinition_Interaction_Interactant_ItemX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ClinicalUseDefinition_Interaction_Interactant_ItemX_Reference
	//	*ClinicalUseDefinition_Interaction_Interactant_ItemX_CodeableConcept
	Choice isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice `protobuf_oneof:"choice"`
}

func (x *ClinicalUseDefinition_Interaction_Interactant_ItemX) Reset() {
	*x = ClinicalUseDefinition_Interaction_Interactant_ItemX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseDefinition_Interaction_Interactant_ItemX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseDefinition_Interaction_Interactant_ItemX) ProtoMessage() {}

func (x *ClinicalUseDefinition_Interaction_Interactant_ItemX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseDefinition_Interaction_Interactant_ItemX.ProtoReflect.Descriptor instead.
func (*ClinicalUseDefinition_Interaction_Interactant_ItemX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (m *ClinicalUseDefinition_Interaction_Interactant_ItemX) GetChoice() isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction_Interactant_ItemX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ClinicalUseDefinition_Interaction_Interactant_ItemX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ClinicalUseDefinition_Interaction_Interactant_ItemX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ClinicalUseDefinition_Interaction_Interactant_ItemX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice interface {
	isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice()
}

type ClinicalUseDefinition_Interaction_Interactant_ItemX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type ClinicalUseDefinition_Interaction_Interactant_ItemX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ClinicalUseDefinition_Interaction_Interactant_ItemX_Reference) isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice() {
}

func (*ClinicalUseDefinition_Interaction_Interactant_ItemX_CodeableConcept) isClinicalUseDefinition_Interaction_Interactant_ItemX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDesc = []byte{
	0x0a, 0x47, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8b, 0x32, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0xfe, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xc3, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x11, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x1a, 0xbe, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xd0, 0x08, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x70,
	0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x64, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x1b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x6d, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61,
	0x70, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61,
	0x70, 0x79, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79,
	0x1a, 0xf1, 0x02, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70,
	0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa4, 0x08, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x19, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x1b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x0d, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x52, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x1a, 0x8e, 0x01, 0x0a, 0x09, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x09, 0x0a, 0x0b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0xf0, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a,
	0xc0, 0x02, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x58, 0x12, 0xd1, 0x01, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x90, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xdb, 0x03, 0x0a, 0x11, 0x55, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x18, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x73, 0x79,
	0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x1a, 0xbe, 0x02, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x3a, 0xb6, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0xe6, 0x01, 0x28, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b, 0x20,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b,
	0x20, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b, 0x20, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x2b, 0x20, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x29, 0x20, 0x20, 0x3c, 0x20, 0x32, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x42, 0x87, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_goTypes = []interface{}{
	(*ClinicalUseDefinition)(nil),                               // 0: google.fhir.r5.core.ClinicalUseDefinition
	(*ClinicalUseDefinition_TypeCode)(nil),                      // 1: google.fhir.r5.core.ClinicalUseDefinition.TypeCode
	(*ClinicalUseDefinition_Contraindication)(nil),              // 2: google.fhir.r5.core.ClinicalUseDefinition.Contraindication
	(*ClinicalUseDefinition_Indication)(nil),                    // 3: google.fhir.r5.core.ClinicalUseDefinition.Indication
	(*ClinicalUseDefinition_Interaction)(nil),                   // 4: google.fhir.r5.core.ClinicalUseDefinition.Interaction
	(*ClinicalUseDefinition_UndesirableEffect)(nil),             // 5: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect
	(*ClinicalUseDefinition_Warning)(nil),                       // 6: google.fhir.r5.core.ClinicalUseDefinition.Warning
	(*ClinicalUseDefinition_Contraindication_OtherTherapy)(nil), // 7: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy
	(*ClinicalUseDefinition_Indication_DurationX)(nil),          // 8: google.fhir.r5.core.ClinicalUseDefinition.Indication.DurationX
	(*ClinicalUseDefinition_Interaction_Interactant)(nil),       // 9: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant
	(*ClinicalUseDefinition_Interaction_Interactant_ItemX)(nil), // 10: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.ItemX
	(*datatypes_go_proto.Id)(nil),                               // 11: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                             // 12: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                              // 13: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                             // 14: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                        // 15: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                           // 16: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                        // 17: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                       // 18: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                  // 19: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                        // 20: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Canonical)(nil),                        // 21: google.fhir.r5.core.Canonical
	(codes_go_proto.ClinicalUseDefinitionTypeCode_Value)(0),     // 22: google.fhir.r5.core.ClinicalUseDefinitionTypeCode.Value
	(*datatypes_go_proto.String)(nil),                           // 23: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableReference)(nil),                // 24: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Expression)(nil),                       // 25: google.fhir.r5.core.Expression
	(*datatypes_go_proto.Markdown)(nil),                         // 26: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Range)(nil),                            // 27: google.fhir.r5.core.Range
}
var file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_depIdxs = []int32{
	11, // 0: google.fhir.r5.core.ClinicalUseDefinition.id:type_name -> google.fhir.r5.core.Id
	12, // 1: google.fhir.r5.core.ClinicalUseDefinition.meta:type_name -> google.fhir.r5.core.Meta
	13, // 2: google.fhir.r5.core.ClinicalUseDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	14, // 3: google.fhir.r5.core.ClinicalUseDefinition.language:type_name -> google.fhir.r5.core.Code
	15, // 4: google.fhir.r5.core.ClinicalUseDefinition.text:type_name -> google.fhir.r5.core.Narrative
	16, // 5: google.fhir.r5.core.ClinicalUseDefinition.contained:type_name -> google.protobuf.Any
	17, // 6: google.fhir.r5.core.ClinicalUseDefinition.extension:type_name -> google.fhir.r5.core.Extension
	17, // 7: google.fhir.r5.core.ClinicalUseDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 8: google.fhir.r5.core.ClinicalUseDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	1,  // 9: google.fhir.r5.core.ClinicalUseDefinition.type:type_name -> google.fhir.r5.core.ClinicalUseDefinition.TypeCode
	19, // 10: google.fhir.r5.core.ClinicalUseDefinition.category:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 11: google.fhir.r5.core.ClinicalUseDefinition.subject:type_name -> google.fhir.r5.core.Reference
	19, // 12: google.fhir.r5.core.ClinicalUseDefinition.status:type_name -> google.fhir.r5.core.CodeableConcept
	2,  // 13: google.fhir.r5.core.ClinicalUseDefinition.contraindication:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Contraindication
	3,  // 14: google.fhir.r5.core.ClinicalUseDefinition.indication:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Indication
	4,  // 15: google.fhir.r5.core.ClinicalUseDefinition.interaction:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Interaction
	20, // 16: google.fhir.r5.core.ClinicalUseDefinition.population:type_name -> google.fhir.r5.core.Reference
	21, // 17: google.fhir.r5.core.ClinicalUseDefinition.library:type_name -> google.fhir.r5.core.Canonical
	5,  // 18: google.fhir.r5.core.ClinicalUseDefinition.undesirable_effect:type_name -> google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect
	6,  // 19: google.fhir.r5.core.ClinicalUseDefinition.warning:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Warning
	22, // 20: google.fhir.r5.core.ClinicalUseDefinition.TypeCode.value:type_name -> google.fhir.r5.core.ClinicalUseDefinitionTypeCode.Value
	23, // 21: google.fhir.r5.core.ClinicalUseDefinition.TypeCode.id:type_name -> google.fhir.r5.core.String
	17, // 22: google.fhir.r5.core.ClinicalUseDefinition.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	23, // 23: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.id:type_name -> google.fhir.r5.core.String
	17, // 24: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.extension:type_name -> google.fhir.r5.core.Extension
	17, // 25: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 26: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.disease_symptom_procedure:type_name -> google.fhir.r5.core.CodeableReference
	24, // 27: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.disease_status:type_name -> google.fhir.r5.core.CodeableReference
	24, // 28: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.comorbidity:type_name -> google.fhir.r5.core.CodeableReference
	20, // 29: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.indication:type_name -> google.fhir.r5.core.Reference
	25, // 30: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.applicability:type_name -> google.fhir.r5.core.Expression
	7,  // 31: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.other_therapy:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy
	23, // 32: google.fhir.r5.core.ClinicalUseDefinition.Indication.id:type_name -> google.fhir.r5.core.String
	17, // 33: google.fhir.r5.core.ClinicalUseDefinition.Indication.extension:type_name -> google.fhir.r5.core.Extension
	17, // 34: google.fhir.r5.core.ClinicalUseDefinition.Indication.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 35: google.fhir.r5.core.ClinicalUseDefinition.Indication.disease_symptom_procedure:type_name -> google.fhir.r5.core.CodeableReference
	24, // 36: google.fhir.r5.core.ClinicalUseDefinition.Indication.disease_status:type_name -> google.fhir.r5.core.CodeableReference
	24, // 37: google.fhir.r5.core.ClinicalUseDefinition.Indication.comorbidity:type_name -> google.fhir.r5.core.CodeableReference
	24, // 38: google.fhir.r5.core.ClinicalUseDefinition.Indication.intended_effect:type_name -> google.fhir.r5.core.CodeableReference
	8,  // 39: google.fhir.r5.core.ClinicalUseDefinition.Indication.duration:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Indication.DurationX
	20, // 40: google.fhir.r5.core.ClinicalUseDefinition.Indication.undesirable_effect:type_name -> google.fhir.r5.core.Reference
	25, // 41: google.fhir.r5.core.ClinicalUseDefinition.Indication.applicability:type_name -> google.fhir.r5.core.Expression
	7,  // 42: google.fhir.r5.core.ClinicalUseDefinition.Indication.other_therapy:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy
	23, // 43: google.fhir.r5.core.ClinicalUseDefinition.Interaction.id:type_name -> google.fhir.r5.core.String
	17, // 44: google.fhir.r5.core.ClinicalUseDefinition.Interaction.extension:type_name -> google.fhir.r5.core.Extension
	17, // 45: google.fhir.r5.core.ClinicalUseDefinition.Interaction.modifier_extension:type_name -> google.fhir.r5.core.Extension
	9,  // 46: google.fhir.r5.core.ClinicalUseDefinition.Interaction.interactant:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant
	19, // 47: google.fhir.r5.core.ClinicalUseDefinition.Interaction.type:type_name -> google.fhir.r5.core.CodeableConcept
	24, // 48: google.fhir.r5.core.ClinicalUseDefinition.Interaction.effect:type_name -> google.fhir.r5.core.CodeableReference
	19, // 49: google.fhir.r5.core.ClinicalUseDefinition.Interaction.incidence:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 50: google.fhir.r5.core.ClinicalUseDefinition.Interaction.management:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 51: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.id:type_name -> google.fhir.r5.core.String
	17, // 52: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.extension:type_name -> google.fhir.r5.core.Extension
	17, // 53: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 54: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.symptom_condition_effect:type_name -> google.fhir.r5.core.CodeableReference
	19, // 55: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.classification:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 56: google.fhir.r5.core.ClinicalUseDefinition.UndesirableEffect.frequency_of_occurrence:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 57: google.fhir.r5.core.ClinicalUseDefinition.Warning.id:type_name -> google.fhir.r5.core.String
	17, // 58: google.fhir.r5.core.ClinicalUseDefinition.Warning.extension:type_name -> google.fhir.r5.core.Extension
	17, // 59: google.fhir.r5.core.ClinicalUseDefinition.Warning.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26, // 60: google.fhir.r5.core.ClinicalUseDefinition.Warning.description:type_name -> google.fhir.r5.core.Markdown
	19, // 61: google.fhir.r5.core.ClinicalUseDefinition.Warning.code:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 62: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy.id:type_name -> google.fhir.r5.core.String
	17, // 63: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy.extension:type_name -> google.fhir.r5.core.Extension
	17, // 64: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 65: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy.relationship_type:type_name -> google.fhir.r5.core.CodeableConcept
	24, // 66: google.fhir.r5.core.ClinicalUseDefinition.Contraindication.OtherTherapy.treatment:type_name -> google.fhir.r5.core.CodeableReference
	27, // 67: google.fhir.r5.core.ClinicalUseDefinition.Indication.DurationX.range:type_name -> google.fhir.r5.core.Range
	23, // 68: google.fhir.r5.core.ClinicalUseDefinition.Indication.DurationX.string_value:type_name -> google.fhir.r5.core.String
	23, // 69: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.id:type_name -> google.fhir.r5.core.String
	17, // 70: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.extension:type_name -> google.fhir.r5.core.Extension
	17, // 71: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.modifier_extension:type_name -> google.fhir.r5.core.Extension
	10, // 72: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.item:type_name -> google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.ItemX
	20, // 73: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.ItemX.reference:type_name -> google.fhir.r5.core.Reference
	19, // 74: google.fhir.r5.core.ClinicalUseDefinition.Interaction.Interactant.ItemX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	75, // [75:75] is the sub-list for method output_type
	75, // [75:75] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Contraindication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Indication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_UndesirableEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Contraindication_OtherTherapy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Indication_DurationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Interaction_Interactant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseDefinition_Interaction_Interactant_ItemX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ClinicalUseDefinition_Indication_DurationX_Range)(nil),
		(*ClinicalUseDefinition_Indication_DurationX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ClinicalUseDefinition_Interaction_Interactant_ItemX_Reference)(nil),
		(*ClinicalUseDefinition_Interaction_Interactant_ItemX_CodeableConcept)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_definition_proto_depIdxs = nil
}
