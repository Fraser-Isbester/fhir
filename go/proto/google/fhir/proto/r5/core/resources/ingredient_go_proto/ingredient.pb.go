//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/ingredient.proto

package ingredient_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Ingredient.
// An ingredient of a manufactured item or pharmaceutical product.
// See http://hl7.org/fhir/StructureDefinition/Ingredient
type Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier or code by which the ingredient can be referenced
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *Ingredient_StatusCode         `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The product which this ingredient is a constituent part of
	ForValue []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=for_value,json=for,proto3" json:"for_value,omitempty"`
	// Purpose of the ingredient within the product, e.g. active, inactive
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=role,proto3" json:"role,omitempty"`
	// Precise action within the drug product, e.g. antioxidant, alkalizing agent
	Function []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=function,proto3" json:"function,omitempty"`
	// A classification of the ingredient according to where in the physical item
	// it tends to be used, such the outer shell of a tablet, inner body or ink
	Group *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	// If the ingredient is a known or suspected allergen
	AllergenicIndicator *datatypes_go_proto.Boolean `protobuf:"bytes,16,opt,name=allergenic_indicator,json=allergenicIndicator,proto3" json:"allergenic_indicator,omitempty"`
	// A place for providing any notes that are relevant to the component, e.g.
	// removed during process, adjusted for loss on drying
	Comment      *datatypes_go_proto.Markdown `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`
	Manufacturer []*Ingredient_Manufacturer   `protobuf:"bytes,18,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Substance    *Ingredient_Substance        `protobuf:"bytes,19,opt,name=substance,proto3" json:"substance,omitempty"`
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0}
}

func (x *Ingredient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Ingredient) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Ingredient) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Ingredient) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Ingredient) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Ingredient) GetStatus() *Ingredient_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Ingredient) GetForValue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ForValue
	}
	return nil
}

func (x *Ingredient) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Ingredient) GetFunction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Ingredient) GetGroup() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Ingredient) GetAllergenicIndicator() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllergenicIndicator
	}
	return nil
}

func (x *Ingredient) GetComment() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Ingredient) GetManufacturer() []*Ingredient_Manufacturer {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Ingredient) GetSubstance() *Ingredient_Substance {
	if x != nil {
		return x.Substance
	}
	return nil
}

// draft | active | retired | unknown
type Ingredient_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Ingredient_StatusCode) Reset() {
	*x = Ingredient_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_StatusCode) ProtoMessage() {}

func (x *Ingredient_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_StatusCode.ProtoReflect.Descriptor instead.
func (*Ingredient_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ingredient_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *Ingredient_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// An organization that manufactures this ingredient
type Ingredient_Manufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Role              *Ingredient_Manufacturer_RoleCode `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// An organization that manufactures this ingredient
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
}

func (x *Ingredient_Manufacturer) Reset() {
	*x = Ingredient_Manufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Manufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Manufacturer) ProtoMessage() {}

func (x *Ingredient_Manufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Manufacturer.ProtoReflect.Descriptor instead.
func (*Ingredient_Manufacturer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ingredient_Manufacturer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Manufacturer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_Manufacturer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_Manufacturer) GetRole() *Ingredient_Manufacturer_RoleCode {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Ingredient_Manufacturer) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

// The substance that comprises this ingredient
type Ingredient_Substance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code or full resource that represents the ingredient substance
	Code     *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Strength []*Ingredient_Substance_Strength      `protobuf:"bytes,5,rep,name=strength,proto3" json:"strength,omitempty"`
}

func (x *Ingredient_Substance) Reset() {
	*x = Ingredient_Substance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance) ProtoMessage() {}

func (x *Ingredient_Substance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ingredient_Substance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Substance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_Substance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_Substance) GetCode() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Ingredient_Substance) GetStrength() []*Ingredient_Substance_Strength {
	if x != nil {
		return x.Strength
	}
	return nil
}

// allowed | possible | actual
type Ingredient_Manufacturer_RoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.IngredientManufacturerRoleCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.IngredientManufacturerRoleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Ingredient_Manufacturer_RoleCode) Reset() {
	*x = Ingredient_Manufacturer_RoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Manufacturer_RoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Manufacturer_RoleCode) ProtoMessage() {}

func (x *Ingredient_Manufacturer_RoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Manufacturer_RoleCode.ProtoReflect.Descriptor instead.
func (*Ingredient_Manufacturer_RoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Ingredient_Manufacturer_RoleCode) GetValue() codes_go_proto.IngredientManufacturerRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.IngredientManufacturerRoleCode_Value(0)
}

func (x *Ingredient_Manufacturer_RoleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Manufacturer_RoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The quantity of substance, per presentation, or per volume or mass, and
// type of quantity
type Ingredient_Substance_Strength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Presentation      *Ingredient_Substance_Strength_PresentationX `protobuf:"bytes,4,opt,name=presentation,proto3" json:"presentation,omitempty"`
	// Text of either the whole presentation strength or a part of it (rest
	// being in Strength.presentation as a ratio)
	TextPresentation *datatypes_go_proto.String                    `protobuf:"bytes,5,opt,name=text_presentation,json=textPresentation,proto3" json:"text_presentation,omitempty"`
	Concentration    *Ingredient_Substance_Strength_ConcentrationX `protobuf:"bytes,6,opt,name=concentration,proto3" json:"concentration,omitempty"`
	// Text of either the whole concentration strength or a part of it (rest
	// being in Strength.concentration as a ratio)
	TextConcentration *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=text_concentration,json=textConcentration,proto3" json:"text_concentration,omitempty"`
	// A code that indicates if the strength is, for example, based on the
	// ingredient substance as stated or on the substance base (when the
	// ingredient is a salt)
	Basis *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=basis,proto3" json:"basis,omitempty"`
	// When strength is measured at a particular point or distance
	MeasurementPoint *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=measurement_point,json=measurementPoint,proto3" json:"measurement_point,omitempty"`
	// Where the strength range applies
	Country           []*datatypes_go_proto.CodeableConcept              `protobuf:"bytes,10,rep,name=country,proto3" json:"country,omitempty"`
	ReferenceStrength []*Ingredient_Substance_Strength_ReferenceStrength `protobuf:"bytes,11,rep,name=reference_strength,json=referenceStrength,proto3" json:"reference_strength,omitempty"`
}

func (x *Ingredient_Substance_Strength) Reset() {
	*x = Ingredient_Substance_Strength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_Strength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_Strength) ProtoMessage() {}

func (x *Ingredient_Substance_Strength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_Strength.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_Strength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Ingredient_Substance_Strength) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetPresentation() *Ingredient_Substance_Strength_PresentationX {
	if x != nil {
		return x.Presentation
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetTextPresentation() *datatypes_go_proto.String {
	if x != nil {
		return x.TextPresentation
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetConcentration() *Ingredient_Substance_Strength_ConcentrationX {
	if x != nil {
		return x.Concentration
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetTextConcentration() *datatypes_go_proto.String {
	if x != nil {
		return x.TextConcentration
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetBasis() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetMeasurementPoint() *datatypes_go_proto.String {
	if x != nil {
		return x.MeasurementPoint
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetCountry() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Ingredient_Substance_Strength) GetReferenceStrength() []*Ingredient_Substance_Strength_ReferenceStrength {
	if x != nil {
		return x.ReferenceStrength
	}
	return nil
}

// The quantity of substance in the unit of presentation
type Ingredient_Substance_Strength_PresentationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Ingredient_Substance_Strength_PresentationX_Ratio
	//	*Ingredient_Substance_Strength_PresentationX_RatioRange
	//	*Ingredient_Substance_Strength_PresentationX_CodeableConcept
	//	*Ingredient_Substance_Strength_PresentationX_Quantity
	Choice isIngredient_Substance_Strength_PresentationX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_Substance_Strength_PresentationX) Reset() {
	*x = Ingredient_Substance_Strength_PresentationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_Strength_PresentationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_Strength_PresentationX) ProtoMessage() {}

func (x *Ingredient_Substance_Strength_PresentationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_Strength_PresentationX.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_Strength_PresentationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (m *Ingredient_Substance_Strength_PresentationX) GetChoice() isIngredient_Substance_Strength_PresentationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_Substance_Strength_PresentationX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_PresentationX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Ingredient_Substance_Strength_PresentationX) GetRatioRange() *datatypes_go_proto.RatioRange {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_PresentationX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *Ingredient_Substance_Strength_PresentationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_PresentationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Ingredient_Substance_Strength_PresentationX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_PresentationX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isIngredient_Substance_Strength_PresentationX_Choice interface {
	isIngredient_Substance_Strength_PresentationX_Choice()
}

type Ingredient_Substance_Strength_PresentationX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Ingredient_Substance_Strength_PresentationX_RatioRange struct {
	RatioRange *datatypes_go_proto.RatioRange `protobuf:"bytes,2,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type Ingredient_Substance_Strength_PresentationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Ingredient_Substance_Strength_PresentationX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,4,opt,name=quantity,proto3,oneof"`
}

func (*Ingredient_Substance_Strength_PresentationX_Ratio) isIngredient_Substance_Strength_PresentationX_Choice() {
}

func (*Ingredient_Substance_Strength_PresentationX_RatioRange) isIngredient_Substance_Strength_PresentationX_Choice() {
}

func (*Ingredient_Substance_Strength_PresentationX_CodeableConcept) isIngredient_Substance_Strength_PresentationX_Choice() {
}

func (*Ingredient_Substance_Strength_PresentationX_Quantity) isIngredient_Substance_Strength_PresentationX_Choice() {
}

// The strength per unitary volume (or mass)
type Ingredient_Substance_Strength_ConcentrationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Ingredient_Substance_Strength_ConcentrationX_Ratio
	//	*Ingredient_Substance_Strength_ConcentrationX_RatioRange
	//	*Ingredient_Substance_Strength_ConcentrationX_CodeableConcept
	//	*Ingredient_Substance_Strength_ConcentrationX_Quantity
	Choice isIngredient_Substance_Strength_ConcentrationX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_Substance_Strength_ConcentrationX) Reset() {
	*x = Ingredient_Substance_Strength_ConcentrationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_Strength_ConcentrationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_Strength_ConcentrationX) ProtoMessage() {}

func (x *Ingredient_Substance_Strength_ConcentrationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_Strength_ConcentrationX.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_Strength_ConcentrationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (m *Ingredient_Substance_Strength_ConcentrationX) GetChoice() isIngredient_Substance_Strength_ConcentrationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ConcentrationX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ConcentrationX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ConcentrationX) GetRatioRange() *datatypes_go_proto.RatioRange {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ConcentrationX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ConcentrationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ConcentrationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ConcentrationX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ConcentrationX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isIngredient_Substance_Strength_ConcentrationX_Choice interface {
	isIngredient_Substance_Strength_ConcentrationX_Choice()
}

type Ingredient_Substance_Strength_ConcentrationX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Ingredient_Substance_Strength_ConcentrationX_RatioRange struct {
	RatioRange *datatypes_go_proto.RatioRange `protobuf:"bytes,2,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type Ingredient_Substance_Strength_ConcentrationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Ingredient_Substance_Strength_ConcentrationX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,4,opt,name=quantity,proto3,oneof"`
}

func (*Ingredient_Substance_Strength_ConcentrationX_Ratio) isIngredient_Substance_Strength_ConcentrationX_Choice() {
}

func (*Ingredient_Substance_Strength_ConcentrationX_RatioRange) isIngredient_Substance_Strength_ConcentrationX_Choice() {
}

func (*Ingredient_Substance_Strength_ConcentrationX_CodeableConcept) isIngredient_Substance_Strength_ConcentrationX_Choice() {
}

func (*Ingredient_Substance_Strength_ConcentrationX_Quantity) isIngredient_Substance_Strength_ConcentrationX_Choice() {
}

// Strength expressed in terms of a reference substance
type Ingredient_Substance_Strength_ReferenceStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Relevant reference substance
	Substance *datatypes_go_proto.CodeableReference                      `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	Strength  *Ingredient_Substance_Strength_ReferenceStrength_StrengthX `protobuf:"bytes,5,opt,name=strength,proto3" json:"strength,omitempty"`
	// When strength is measured at a particular point or distance
	MeasurementPoint *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=measurement_point,json=measurementPoint,proto3" json:"measurement_point,omitempty"`
	// Where the strength range applies
	Country []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=country,proto3" json:"country,omitempty"`
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) Reset() {
	*x = Ingredient_Substance_Strength_ReferenceStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_Strength_ReferenceStrength) ProtoMessage() {}

func (x *Ingredient_Substance_Strength_ReferenceStrength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_Strength_ReferenceStrength.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_Strength_ReferenceStrength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetSubstance() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetStrength() *Ingredient_Substance_Strength_ReferenceStrength_StrengthX {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetMeasurementPoint() *datatypes_go_proto.String {
	if x != nil {
		return x.MeasurementPoint
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength) GetCountry() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

// Strength expressed in terms of a reference substance
type Ingredient_Substance_Strength_ReferenceStrength_StrengthX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Ratio
	//	*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_RatioRange
	//	*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Quantity
	Choice isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) Reset() {
	*x = Ingredient_Substance_Strength_ReferenceStrength_StrengthX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_Strength_ReferenceStrength_StrengthX) ProtoMessage() {}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_Strength_ReferenceStrength_StrengthX.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_Strength_ReferenceStrength_StrengthX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0}
}

func (m *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) GetChoice() isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) GetRatioRange() *datatypes_go_proto.RatioRange {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *Ingredient_Substance_Strength_ReferenceStrength_StrengthX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice interface {
	isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice()
}

type Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Ingredient_Substance_Strength_ReferenceStrength_StrengthX_RatioRange struct {
	RatioRange *datatypes_go_proto.RatioRange `protobuf:"bytes,2,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Ratio) isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice() {
}

func (*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_RatioRange) isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice() {
}

func (*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Quantity) isIngredient_Substance_Strength_ReferenceStrength_StrengthX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_ingredient_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x27, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x64, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xb3, 0x05, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x1a, 0xbf, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x77, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c,
	0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x8a, 0x14, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xae, 0x11, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xa9, 0x02, 0x0a,
	0x0d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x32,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xaa, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x42, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xee, 0x05, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x1a, 0xd2, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x58, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xa9, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x3d, 0x74, 0x72, 0x75, 0x65, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x2b, 0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x20, 0x3c,
	0x20, 0x32, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7a, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes = []interface{}{
	(*Ingredient)(nil),                                                // 0: google.fhir.r5.core.Ingredient
	(*Ingredient_StatusCode)(nil),                                     // 1: google.fhir.r5.core.Ingredient.StatusCode
	(*Ingredient_Manufacturer)(nil),                                   // 2: google.fhir.r5.core.Ingredient.Manufacturer
	(*Ingredient_Substance)(nil),                                      // 3: google.fhir.r5.core.Ingredient.Substance
	(*Ingredient_Manufacturer_RoleCode)(nil),                          // 4: google.fhir.r5.core.Ingredient.Manufacturer.RoleCode
	(*Ingredient_Substance_Strength)(nil),                             // 5: google.fhir.r5.core.Ingredient.Substance.Strength
	(*Ingredient_Substance_Strength_PresentationX)(nil),               // 6: google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX
	(*Ingredient_Substance_Strength_ConcentrationX)(nil),              // 7: google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX
	(*Ingredient_Substance_Strength_ReferenceStrength)(nil),           // 8: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength
	(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX)(nil), // 9: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.StrengthX
	(*datatypes_go_proto.Id)(nil),                                     // 10: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                   // 11: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                    // 12: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                   // 13: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                              // 14: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                 // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                              // 16: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                             // 17: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                              // 18: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                        // 19: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Boolean)(nil),                                // 20: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Markdown)(nil),                               // 21: google.fhir.r5.core.Markdown
	(codes_go_proto.PublicationStatusCode_Value)(0),                   // 22: google.fhir.r5.core.PublicationStatusCode.Value
	(*datatypes_go_proto.String)(nil),                                 // 23: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableReference)(nil),                      // 24: google.fhir.r5.core.CodeableReference
	(codes_go_proto.IngredientManufacturerRoleCode_Value)(0),          // 25: google.fhir.r5.core.IngredientManufacturerRoleCode.Value
	(*datatypes_go_proto.Ratio)(nil),                                  // 26: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.RatioRange)(nil),                             // 27: google.fhir.r5.core.RatioRange
	(*datatypes_go_proto.Quantity)(nil),                               // 28: google.fhir.r5.core.Quantity
}
var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs = []int32{
	10, // 0: google.fhir.r5.core.Ingredient.id:type_name -> google.fhir.r5.core.Id
	11, // 1: google.fhir.r5.core.Ingredient.meta:type_name -> google.fhir.r5.core.Meta
	12, // 2: google.fhir.r5.core.Ingredient.implicit_rules:type_name -> google.fhir.r5.core.Uri
	13, // 3: google.fhir.r5.core.Ingredient.language:type_name -> google.fhir.r5.core.Code
	14, // 4: google.fhir.r5.core.Ingredient.text:type_name -> google.fhir.r5.core.Narrative
	15, // 5: google.fhir.r5.core.Ingredient.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r5.core.Ingredient.extension:type_name -> google.fhir.r5.core.Extension
	16, // 7: google.fhir.r5.core.Ingredient.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 8: google.fhir.r5.core.Ingredient.identifier:type_name -> google.fhir.r5.core.Identifier
	1,  // 9: google.fhir.r5.core.Ingredient.status:type_name -> google.fhir.r5.core.Ingredient.StatusCode
	18, // 10: google.fhir.r5.core.Ingredient.for_value:type_name -> google.fhir.r5.core.Reference
	19, // 11: google.fhir.r5.core.Ingredient.role:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 12: google.fhir.r5.core.Ingredient.function:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 13: google.fhir.r5.core.Ingredient.group:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 14: google.fhir.r5.core.Ingredient.allergenic_indicator:type_name -> google.fhir.r5.core.Boolean
	21, // 15: google.fhir.r5.core.Ingredient.comment:type_name -> google.fhir.r5.core.Markdown
	2,  // 16: google.fhir.r5.core.Ingredient.manufacturer:type_name -> google.fhir.r5.core.Ingredient.Manufacturer
	3,  // 17: google.fhir.r5.core.Ingredient.substance:type_name -> google.fhir.r5.core.Ingredient.Substance
	22, // 18: google.fhir.r5.core.Ingredient.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	23, // 19: google.fhir.r5.core.Ingredient.StatusCode.id:type_name -> google.fhir.r5.core.String
	16, // 20: google.fhir.r5.core.Ingredient.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	23, // 21: google.fhir.r5.core.Ingredient.Manufacturer.id:type_name -> google.fhir.r5.core.String
	16, // 22: google.fhir.r5.core.Ingredient.Manufacturer.extension:type_name -> google.fhir.r5.core.Extension
	16, // 23: google.fhir.r5.core.Ingredient.Manufacturer.modifier_extension:type_name -> google.fhir.r5.core.Extension
	4,  // 24: google.fhir.r5.core.Ingredient.Manufacturer.role:type_name -> google.fhir.r5.core.Ingredient.Manufacturer.RoleCode
	18, // 25: google.fhir.r5.core.Ingredient.Manufacturer.manufacturer:type_name -> google.fhir.r5.core.Reference
	23, // 26: google.fhir.r5.core.Ingredient.Substance.id:type_name -> google.fhir.r5.core.String
	16, // 27: google.fhir.r5.core.Ingredient.Substance.extension:type_name -> google.fhir.r5.core.Extension
	16, // 28: google.fhir.r5.core.Ingredient.Substance.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 29: google.fhir.r5.core.Ingredient.Substance.code:type_name -> google.fhir.r5.core.CodeableReference
	5,  // 30: google.fhir.r5.core.Ingredient.Substance.strength:type_name -> google.fhir.r5.core.Ingredient.Substance.Strength
	25, // 31: google.fhir.r5.core.Ingredient.Manufacturer.RoleCode.value:type_name -> google.fhir.r5.core.IngredientManufacturerRoleCode.Value
	23, // 32: google.fhir.r5.core.Ingredient.Manufacturer.RoleCode.id:type_name -> google.fhir.r5.core.String
	16, // 33: google.fhir.r5.core.Ingredient.Manufacturer.RoleCode.extension:type_name -> google.fhir.r5.core.Extension
	23, // 34: google.fhir.r5.core.Ingredient.Substance.Strength.id:type_name -> google.fhir.r5.core.String
	16, // 35: google.fhir.r5.core.Ingredient.Substance.Strength.extension:type_name -> google.fhir.r5.core.Extension
	16, // 36: google.fhir.r5.core.Ingredient.Substance.Strength.modifier_extension:type_name -> google.fhir.r5.core.Extension
	6,  // 37: google.fhir.r5.core.Ingredient.Substance.Strength.presentation:type_name -> google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX
	23, // 38: google.fhir.r5.core.Ingredient.Substance.Strength.text_presentation:type_name -> google.fhir.r5.core.String
	7,  // 39: google.fhir.r5.core.Ingredient.Substance.Strength.concentration:type_name -> google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX
	23, // 40: google.fhir.r5.core.Ingredient.Substance.Strength.text_concentration:type_name -> google.fhir.r5.core.String
	19, // 41: google.fhir.r5.core.Ingredient.Substance.Strength.basis:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 42: google.fhir.r5.core.Ingredient.Substance.Strength.measurement_point:type_name -> google.fhir.r5.core.String
	19, // 43: google.fhir.r5.core.Ingredient.Substance.Strength.country:type_name -> google.fhir.r5.core.CodeableConcept
	8,  // 44: google.fhir.r5.core.Ingredient.Substance.Strength.reference_strength:type_name -> google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength
	26, // 45: google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX.ratio:type_name -> google.fhir.r5.core.Ratio
	27, // 46: google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	19, // 47: google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	28, // 48: google.fhir.r5.core.Ingredient.Substance.Strength.PresentationX.quantity:type_name -> google.fhir.r5.core.Quantity
	26, // 49: google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX.ratio:type_name -> google.fhir.r5.core.Ratio
	27, // 50: google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	19, // 51: google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	28, // 52: google.fhir.r5.core.Ingredient.Substance.Strength.ConcentrationX.quantity:type_name -> google.fhir.r5.core.Quantity
	23, // 53: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.id:type_name -> google.fhir.r5.core.String
	16, // 54: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.extension:type_name -> google.fhir.r5.core.Extension
	16, // 55: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 56: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.substance:type_name -> google.fhir.r5.core.CodeableReference
	9,  // 57: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.strength:type_name -> google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.StrengthX
	23, // 58: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.measurement_point:type_name -> google.fhir.r5.core.String
	19, // 59: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.country:type_name -> google.fhir.r5.core.CodeableConcept
	26, // 60: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.StrengthX.ratio:type_name -> google.fhir.r5.core.Ratio
	27, // 61: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.StrengthX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	28, // 62: google.fhir.r5.core.Ingredient.Substance.Strength.ReferenceStrength.StrengthX.quantity:type_name -> google.fhir.r5.core.Quantity
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_ingredient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Manufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Manufacturer_RoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_Strength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_Strength_PresentationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_Strength_ConcentrationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_Strength_ReferenceStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Ingredient_Substance_Strength_PresentationX_Ratio)(nil),
		(*Ingredient_Substance_Strength_PresentationX_RatioRange)(nil),
		(*Ingredient_Substance_Strength_PresentationX_CodeableConcept)(nil),
		(*Ingredient_Substance_Strength_PresentationX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Ingredient_Substance_Strength_ConcentrationX_Ratio)(nil),
		(*Ingredient_Substance_Strength_ConcentrationX_RatioRange)(nil),
		(*Ingredient_Substance_Strength_ConcentrationX_CodeableConcept)(nil),
		(*Ingredient_Substance_Strength_ConcentrationX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Ratio)(nil),
		(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_RatioRange)(nil),
		(*Ingredient_Substance_Strength_ReferenceStrength_StrengthX_Quantity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_ingredient_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs = nil
}
