//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/medicinal_product_definition.proto

package medicinal_product_definition_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProductDefinition.
// Detailed definition of a medicinal product.
// See http://hl7.org/fhir/StructureDefinition/MedicinalProductDefinition
type MedicinalProductDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this product. Could be an MPID
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Regulatory type, e.g. Investigational or Authorized
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// If this medicine applies to human or veterinary uses
	Domain *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=domain,proto3" json:"domain,omitempty"`
	// A business identifier relating to a specific version of the product
	Version *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	// The status within the lifecycle of this product record
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the given status became applicable
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// General description of this product
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	// The dose form for a single part product, or combined form of a multiple
	// part product
	CombinedPharmaceuticalDoseForm *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=combined_pharmaceutical_dose_form,json=combinedPharmaceuticalDoseForm,proto3" json:"combined_pharmaceutical_dose_form,omitempty"`
	// The path by which the product is taken into or makes contact with the body
	Route []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=route,proto3" json:"route,omitempty"`
	// Description of indication(s) for this product, used when structured
	// indications are not required
	Indication *datatypes_go_proto.Markdown `protobuf:"bytes,19,opt,name=indication,proto3" json:"indication,omitempty"`
	// The legal status of supply of the medicinal product as classified by the
	// regulator
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Whether the Medicinal Product is subject to additional monitoring for
	// regulatory reasons
	AdditionalMonitoringIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=additional_monitoring_indicator,json=additionalMonitoringIndicator,proto3" json:"additional_monitoring_indicator,omitempty"`
	// Whether the Medicinal Product is subject to special measures for regulatory
	// reasons
	SpecialMeasures []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=special_measures,json=specialMeasures,proto3" json:"special_measures,omitempty"`
	// If authorised for use in children
	PediatricUseIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=pediatric_use_indicator,json=pediatricUseIndicator,proto3" json:"pediatric_use_indicator,omitempty"`
	// Allows the product to be classified by various systems
	Classification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=classification,proto3" json:"classification,omitempty"`
	// Marketing status of the medicinal product, in contrast to marketing
	// authorization
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,25,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// Package type for the product
	PackagedMedicinalProduct []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=packaged_medicinal_product,json=packagedMedicinalProduct,proto3" json:"packaged_medicinal_product,omitempty"`
	// Types of medicinal manufactured items and/or devices that this product
	// consists of, such as tablets, capsule, or syringes
	ComprisedOf []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=comprised_of,json=comprisedOf,proto3" json:"comprised_of,omitempty"`
	// The ingredients of this medicinal product - when not detailed in other
	// resources
	Ingredient []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	// Any component of the drug product which is not the chemical entity defined
	// as the drug substance, or an excipient in the drug product
	Impurity []*datatypes_go_proto.CodeableReference `protobuf:"bytes,29,rep,name=impurity,proto3" json:"impurity,omitempty"`
	// Additional documentation about the medicinal product
	AttachedDocument []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=attached_document,json=attachedDocument,proto3" json:"attached_document,omitempty"`
	// A master file for the medicinal product (e.g. Pharmacovigilance System
	// Master File)
	MasterFile []*datatypes_go_proto.Reference       `protobuf:"bytes,31,rep,name=master_file,json=masterFile,proto3" json:"master_file,omitempty"`
	Contact    []*MedicinalProductDefinition_Contact `protobuf:"bytes,32,rep,name=contact,proto3" json:"contact,omitempty"`
	// Clinical trials or studies that this product is involved in
	ClinicalTrial []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=clinical_trial,json=clinicalTrial,proto3" json:"clinical_trial,omitempty"`
	// A code that this product is known by, within some formal terminology
	Code           []*datatypes_go_proto.Coding                 `protobuf:"bytes,34,rep,name=code,proto3" json:"code,omitempty"`
	Name           []*MedicinalProductDefinition_Name           `protobuf:"bytes,35,rep,name=name,proto3" json:"name,omitempty"`
	CrossReference []*MedicinalProductDefinition_CrossReference `protobuf:"bytes,36,rep,name=cross_reference,json=crossReference,proto3" json:"cross_reference,omitempty"`
	Operation      []*MedicinalProductDefinition_Operation      `protobuf:"bytes,37,rep,name=operation,proto3" json:"operation,omitempty"`
	Characteristic []*MedicinalProductDefinition_Characteristic `protobuf:"bytes,38,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
}

func (x *MedicinalProductDefinition) Reset() {
	*x = MedicinalProductDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition) ProtoMessage() {}

func (x *MedicinalProductDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProductDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProductDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProductDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProductDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProductDefinition) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProductDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductDefinition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition) GetDomain() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *MedicinalProductDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *MedicinalProductDefinition) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicinalProductDefinition) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *MedicinalProductDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCombinedPharmaceuticalDoseForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CombinedPharmaceuticalDoseForm
	}
	return nil
}

func (x *MedicinalProductDefinition) GetRoute() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIndication() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *MedicinalProductDefinition) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *MedicinalProductDefinition) GetAdditionalMonitoringIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditionalMonitoringIndicator
	}
	return nil
}

func (x *MedicinalProductDefinition) GetSpecialMeasures() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialMeasures
	}
	return nil
}

func (x *MedicinalProductDefinition) GetPediatricUseIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PediatricUseIndicator
	}
	return nil
}

func (x *MedicinalProductDefinition) GetClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *MedicinalProductDefinition) GetPackagedMedicinalProduct() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PackagedMedicinalProduct
	}
	return nil
}

func (x *MedicinalProductDefinition) GetComprisedOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ComprisedOf
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIngredient() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *MedicinalProductDefinition) GetImpurity() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Impurity
	}
	return nil
}

func (x *MedicinalProductDefinition) GetAttachedDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AttachedDocument
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMasterFile() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.MasterFile
	}
	return nil
}

func (x *MedicinalProductDefinition) GetContact() []*MedicinalProductDefinition_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *MedicinalProductDefinition) GetClinicalTrial() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ClinicalTrial
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MedicinalProductDefinition) GetName() []*MedicinalProductDefinition_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCrossReference() []*MedicinalProductDefinition_CrossReference {
	if x != nil {
		return x.CrossReference
	}
	return nil
}

func (x *MedicinalProductDefinition) GetOperation() []*MedicinalProductDefinition_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCharacteristic() []*MedicinalProductDefinition_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

// A product specific contact, person (in a role), or an organization
type MedicinalProductDefinition_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Allows the contact to be classified, for example QPPV, Pharmacovigilance
	// Enquiry Information
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// A product specific contact, person (in a role), or an organization
	Contact *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *MedicinalProductDefinition_Contact) Reset() {
	*x = MedicinalProductDefinition_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Contact) ProtoMessage() {}

func (x *MedicinalProductDefinition_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Contact.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProductDefinition_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetContact() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Contact
	}
	return nil
}

// The product's name, including full name and possibly coded parts
type MedicinalProductDefinition_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The full product name
	ProductName *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary
	Type  *datatypes_go_proto.CodeableConcept      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Part  []*MedicinalProductDefinition_Name_Part  `protobuf:"bytes,6,rep,name=part,proto3" json:"part,omitempty"`
	Usage []*MedicinalProductDefinition_Name_Usage `protobuf:"bytes,7,rep,name=usage,proto3" json:"usage,omitempty"`
}

func (x *MedicinalProductDefinition_Name) Reset() {
	*x = MedicinalProductDefinition_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicinalProductDefinition_Name) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetPart() []*MedicinalProductDefinition_Name_Part {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetUsage() []*MedicinalProductDefinition_Name_Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// Reference to another product, e.g. for linking authorised to
// investigational product
type MedicinalProductDefinition_CrossReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to another product, e.g. for linking authorised to
	// investigational product
	Product *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	// The type of relationship, for instance branded to generic or virtual to
	// actual product
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MedicinalProductDefinition_CrossReference) Reset() {
	*x = MedicinalProductDefinition_CrossReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_CrossReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_CrossReference) ProtoMessage() {}

func (x *MedicinalProductDefinition_CrossReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_CrossReference.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_CrossReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicinalProductDefinition_CrossReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetProduct() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

// A manufacturing or administrative process for the medicinal product
type MedicinalProductDefinition_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of manufacturing operation e.g. manufacturing itself,
	// re-packaging
	Type *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Date range of applicability
	EffectiveDate *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The organization responsible for the particular process, e.g. the
	// manufacturer or importer
	Organization []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=organization,proto3" json:"organization,omitempty"`
	// Specifies whether this process is considered proprietary or confidential
	ConfidentialityIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=confidentiality_indicator,json=confidentialityIndicator,proto3" json:"confidentiality_indicator,omitempty"`
}

func (x *MedicinalProductDefinition_Operation) Reset() {
	*x = MedicinalProductDefinition_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Operation) ProtoMessage() {}

func (x *MedicinalProductDefinition_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Operation.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Operation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MedicinalProductDefinition_Operation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetType() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetEffectiveDate() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetOrganization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *MedicinalProductDefinition_Operation) GetConfidentialityIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConfidentialityIndicator
	}
	return nil
}

// Key product features such as "sugar free", "modified release"
type MedicinalProductDefinition_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code expressing the type of characteristic
	Type  *datatypes_go_proto.CodeableConcept               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicinalProductDefinition_Characteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicinalProductDefinition_Characteristic) Reset() {
	*x = MedicinalProductDefinition_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Characteristic) ProtoMessage() {}

func (x *MedicinalProductDefinition_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Characteristic.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Characteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MedicinalProductDefinition_Characteristic) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic) GetValue() *MedicinalProductDefinition_Characteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Coding words or phrases of the name
type MedicinalProductDefinition_Name_Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fragment of a product name
	Part *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=part,proto3" json:"part,omitempty"`
	// Identifying type for this part of the name (e.g. strength part)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MedicinalProductDefinition_Name_Part) Reset() {
	*x = MedicinalProductDefinition_Name_Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name_Part) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name_Part) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name_Part.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name_Part) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MedicinalProductDefinition_Name_Part) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Part) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Part) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Part) GetPart() *datatypes_go_proto.String {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Part) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

// Country and jurisdiction where the name applies
type MedicinalProductDefinition_Name_Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Country code for where this name applies
	Country *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// Jurisdiction code for where this name applies
	Jurisdiction *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Language code for this name
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *MedicinalProductDefinition_Name_Usage) Reset() {
	*x = MedicinalProductDefinition_Name_Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name_Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name_Usage) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name_Usage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name_Usage.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name_Usage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *MedicinalProductDefinition_Name_Usage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Usage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Usage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Usage) GetCountry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Usage) GetJurisdiction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_Usage) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

// A value for the characteristic
type MedicinalProductDefinition_Characteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*MedicinalProductDefinition_Characteristic_ValueX_CodeableConcept
	//	*MedicinalProductDefinition_Characteristic_ValueX_Markdown
	//	*MedicinalProductDefinition_Characteristic_ValueX_Quantity
	//	*MedicinalProductDefinition_Characteristic_ValueX_Integer
	//	*MedicinalProductDefinition_Characteristic_ValueX_Date
	//	*MedicinalProductDefinition_Characteristic_ValueX_Boolean
	//	*MedicinalProductDefinition_Characteristic_ValueX_Attachment
	Choice isMedicinalProductDefinition_Characteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) Reset() {
	*x = MedicinalProductDefinition_Characteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Characteristic_ValueX) ProtoMessage() {}

func (x *MedicinalProductDefinition_Characteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Characteristic_ValueX.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Characteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *MedicinalProductDefinition_Characteristic_ValueX) GetChoice() isMedicinalProductDefinition_Characteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MedicinalProductDefinition_Characteristic_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_Characteristic_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isMedicinalProductDefinition_Characteristic_ValueX_Choice interface {
	isMedicinalProductDefinition_Characteristic_ValueX_Choice()
}

type MedicinalProductDefinition_Characteristic_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,2,opt,name=markdown,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=integer,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=boolean,proto3,oneof"`
}

type MedicinalProductDefinition_Characteristic_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

func (*MedicinalProductDefinition_Characteristic_ValueX_CodeableConcept) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Markdown) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Quantity) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Integer) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Date) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Boolean) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

func (*MedicinalProductDefinition_Characteristic_ValueX_Attachment) isMedicinalProductDefinition_Characteristic_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x30, 0x0a, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a,
	0x21, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x1e,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65,
	0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x3a,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x70, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x62, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x79, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x64, 0x5f, 0x6f, 0x66, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x66, 0x12,
	0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x11, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x58, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xe7, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a,
	0xc1, 0x09, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xbb, 0x02, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x72,
	0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x9d, 0x03, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x1a, 0xce, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x80, 0x04, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xbb, 0x06, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x03, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x8c, 0x01, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a,
	0x69, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes = []interface{}{
	(*MedicinalProductDefinition)(nil),                       // 0: google.fhir.r5.core.MedicinalProductDefinition
	(*MedicinalProductDefinition_Contact)(nil),               // 1: google.fhir.r5.core.MedicinalProductDefinition.Contact
	(*MedicinalProductDefinition_Name)(nil),                  // 2: google.fhir.r5.core.MedicinalProductDefinition.Name
	(*MedicinalProductDefinition_CrossReference)(nil),        // 3: google.fhir.r5.core.MedicinalProductDefinition.CrossReference
	(*MedicinalProductDefinition_Operation)(nil),             // 4: google.fhir.r5.core.MedicinalProductDefinition.Operation
	(*MedicinalProductDefinition_Characteristic)(nil),        // 5: google.fhir.r5.core.MedicinalProductDefinition.Characteristic
	(*MedicinalProductDefinition_Name_Part)(nil),             // 6: google.fhir.r5.core.MedicinalProductDefinition.Name.Part
	(*MedicinalProductDefinition_Name_Usage)(nil),            // 7: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage
	(*MedicinalProductDefinition_Characteristic_ValueX)(nil), // 8: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX
	(*datatypes_go_proto.Id)(nil),                            // 9: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                          // 10: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                           // 11: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                          // 12: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                     // 13: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                        // 14: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                     // 15: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                    // 16: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),               // 17: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.String)(nil),                        // 18: google.fhir.r5.core.String
	(*datatypes_go_proto.DateTime)(nil),                      // 19: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Markdown)(nil),                      // 20: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.MarketingStatus)(nil),               // 21: google.fhir.r5.core.MarketingStatus
	(*datatypes_go_proto.Reference)(nil),                     // 22: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableReference)(nil),             // 23: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Coding)(nil),                        // 24: google.fhir.r5.core.Coding
	(*datatypes_go_proto.Period)(nil),                        // 25: google.fhir.r5.core.Period
	(*datatypes_go_proto.Quantity)(nil),                      // 26: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Integer)(nil),                       // 27: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Date)(nil),                          // 28: google.fhir.r5.core.Date
	(*datatypes_go_proto.Boolean)(nil),                       // 29: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Attachment)(nil),                    // 30: google.fhir.r5.core.Attachment
}
var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs = []int32{
	9,  // 0: google.fhir.r5.core.MedicinalProductDefinition.id:type_name -> google.fhir.r5.core.Id
	10, // 1: google.fhir.r5.core.MedicinalProductDefinition.meta:type_name -> google.fhir.r5.core.Meta
	11, // 2: google.fhir.r5.core.MedicinalProductDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	12, // 3: google.fhir.r5.core.MedicinalProductDefinition.language:type_name -> google.fhir.r5.core.Code
	13, // 4: google.fhir.r5.core.MedicinalProductDefinition.text:type_name -> google.fhir.r5.core.Narrative
	14, // 5: google.fhir.r5.core.MedicinalProductDefinition.contained:type_name -> google.protobuf.Any
	15, // 6: google.fhir.r5.core.MedicinalProductDefinition.extension:type_name -> google.fhir.r5.core.Extension
	15, // 7: google.fhir.r5.core.MedicinalProductDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16, // 8: google.fhir.r5.core.MedicinalProductDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	17, // 9: google.fhir.r5.core.MedicinalProductDefinition.type:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 10: google.fhir.r5.core.MedicinalProductDefinition.domain:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 11: google.fhir.r5.core.MedicinalProductDefinition.version:type_name -> google.fhir.r5.core.String
	17, // 12: google.fhir.r5.core.MedicinalProductDefinition.status:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 13: google.fhir.r5.core.MedicinalProductDefinition.status_date:type_name -> google.fhir.r5.core.DateTime
	20, // 14: google.fhir.r5.core.MedicinalProductDefinition.description:type_name -> google.fhir.r5.core.Markdown
	17, // 15: google.fhir.r5.core.MedicinalProductDefinition.combined_pharmaceutical_dose_form:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 16: google.fhir.r5.core.MedicinalProductDefinition.route:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 17: google.fhir.r5.core.MedicinalProductDefinition.indication:type_name -> google.fhir.r5.core.Markdown
	17, // 18: google.fhir.r5.core.MedicinalProductDefinition.legal_status_of_supply:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 19: google.fhir.r5.core.MedicinalProductDefinition.additional_monitoring_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 20: google.fhir.r5.core.MedicinalProductDefinition.special_measures:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 21: google.fhir.r5.core.MedicinalProductDefinition.pediatric_use_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 22: google.fhir.r5.core.MedicinalProductDefinition.classification:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 23: google.fhir.r5.core.MedicinalProductDefinition.marketing_status:type_name -> google.fhir.r5.core.MarketingStatus
	17, // 24: google.fhir.r5.core.MedicinalProductDefinition.packaged_medicinal_product:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 25: google.fhir.r5.core.MedicinalProductDefinition.comprised_of:type_name -> google.fhir.r5.core.Reference
	17, // 26: google.fhir.r5.core.MedicinalProductDefinition.ingredient:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 27: google.fhir.r5.core.MedicinalProductDefinition.impurity:type_name -> google.fhir.r5.core.CodeableReference
	22, // 28: google.fhir.r5.core.MedicinalProductDefinition.attached_document:type_name -> google.fhir.r5.core.Reference
	22, // 29: google.fhir.r5.core.MedicinalProductDefinition.master_file:type_name -> google.fhir.r5.core.Reference
	1,  // 30: google.fhir.r5.core.MedicinalProductDefinition.contact:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Contact
	22, // 31: google.fhir.r5.core.MedicinalProductDefinition.clinical_trial:type_name -> google.fhir.r5.core.Reference
	24, // 32: google.fhir.r5.core.MedicinalProductDefinition.code:type_name -> google.fhir.r5.core.Coding
	2,  // 33: google.fhir.r5.core.MedicinalProductDefinition.name:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name
	3,  // 34: google.fhir.r5.core.MedicinalProductDefinition.cross_reference:type_name -> google.fhir.r5.core.MedicinalProductDefinition.CrossReference
	4,  // 35: google.fhir.r5.core.MedicinalProductDefinition.operation:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Operation
	5,  // 36: google.fhir.r5.core.MedicinalProductDefinition.characteristic:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Characteristic
	18, // 37: google.fhir.r5.core.MedicinalProductDefinition.Contact.id:type_name -> google.fhir.r5.core.String
	15, // 38: google.fhir.r5.core.MedicinalProductDefinition.Contact.extension:type_name -> google.fhir.r5.core.Extension
	15, // 39: google.fhir.r5.core.MedicinalProductDefinition.Contact.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 40: google.fhir.r5.core.MedicinalProductDefinition.Contact.type:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 41: google.fhir.r5.core.MedicinalProductDefinition.Contact.contact:type_name -> google.fhir.r5.core.Reference
	18, // 42: google.fhir.r5.core.MedicinalProductDefinition.Name.id:type_name -> google.fhir.r5.core.String
	15, // 43: google.fhir.r5.core.MedicinalProductDefinition.Name.extension:type_name -> google.fhir.r5.core.Extension
	15, // 44: google.fhir.r5.core.MedicinalProductDefinition.Name.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 45: google.fhir.r5.core.MedicinalProductDefinition.Name.product_name:type_name -> google.fhir.r5.core.String
	17, // 46: google.fhir.r5.core.MedicinalProductDefinition.Name.type:type_name -> google.fhir.r5.core.CodeableConcept
	6,  // 47: google.fhir.r5.core.MedicinalProductDefinition.Name.part:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name.Part
	7,  // 48: google.fhir.r5.core.MedicinalProductDefinition.Name.usage:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name.Usage
	18, // 49: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.id:type_name -> google.fhir.r5.core.String
	15, // 50: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.extension:type_name -> google.fhir.r5.core.Extension
	15, // 51: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.modifier_extension:type_name -> google.fhir.r5.core.Extension
	23, // 52: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.product:type_name -> google.fhir.r5.core.CodeableReference
	17, // 53: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.type:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 54: google.fhir.r5.core.MedicinalProductDefinition.Operation.id:type_name -> google.fhir.r5.core.String
	15, // 55: google.fhir.r5.core.MedicinalProductDefinition.Operation.extension:type_name -> google.fhir.r5.core.Extension
	15, // 56: google.fhir.r5.core.MedicinalProductDefinition.Operation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	23, // 57: google.fhir.r5.core.MedicinalProductDefinition.Operation.type:type_name -> google.fhir.r5.core.CodeableReference
	25, // 58: google.fhir.r5.core.MedicinalProductDefinition.Operation.effective_date:type_name -> google.fhir.r5.core.Period
	22, // 59: google.fhir.r5.core.MedicinalProductDefinition.Operation.organization:type_name -> google.fhir.r5.core.Reference
	17, // 60: google.fhir.r5.core.MedicinalProductDefinition.Operation.confidentiality_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 61: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.id:type_name -> google.fhir.r5.core.String
	15, // 62: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.extension:type_name -> google.fhir.r5.core.Extension
	15, // 63: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 64: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.type:type_name -> google.fhir.r5.core.CodeableConcept
	8,  // 65: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.value:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX
	18, // 66: google.fhir.r5.core.MedicinalProductDefinition.Name.Part.id:type_name -> google.fhir.r5.core.String
	15, // 67: google.fhir.r5.core.MedicinalProductDefinition.Name.Part.extension:type_name -> google.fhir.r5.core.Extension
	15, // 68: google.fhir.r5.core.MedicinalProductDefinition.Name.Part.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 69: google.fhir.r5.core.MedicinalProductDefinition.Name.Part.part:type_name -> google.fhir.r5.core.String
	17, // 70: google.fhir.r5.core.MedicinalProductDefinition.Name.Part.type:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 71: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.id:type_name -> google.fhir.r5.core.String
	15, // 72: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.extension:type_name -> google.fhir.r5.core.Extension
	15, // 73: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 74: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.country:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 75: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 76: google.fhir.r5.core.MedicinalProductDefinition.Name.Usage.language:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 77: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 78: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.markdown:type_name -> google.fhir.r5.core.Markdown
	26, // 79: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	27, // 80: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	28, // 81: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.date:type_name -> google.fhir.r5.core.Date
	29, // 82: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	30, // 83: google.fhir.r5.core.MedicinalProductDefinition.Characteristic.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_CrossReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name_Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name_Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Characteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*MedicinalProductDefinition_Characteristic_ValueX_CodeableConcept)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Markdown)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Quantity)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Integer)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Date)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Boolean)(nil),
		(*MedicinalProductDefinition_Characteristic_ValueX_Attachment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs = nil
}
