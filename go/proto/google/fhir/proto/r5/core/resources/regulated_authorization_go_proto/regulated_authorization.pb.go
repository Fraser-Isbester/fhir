//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/regulated_authorization.proto

package regulated_authorization_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for RegulatedAuthorization.
// Regulatory approval, clearance or licencing related to a regulated product,
// treatment, facility or activity e.g. Market Authorization for a Medicinal
// Product. See http://hl7.org/fhir/StructureDefinition/RegulatedAuthorization
type RegulatedAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for the authorization, typically assigned by the
	// authorizing body
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The product type, treatment, facility or activity that is being authorized
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=subject,proto3" json:"subject,omitempty"`
	// Overall type of this authorization, for example drug marketing approval,
	// orphan drug designation
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// General textual supporting information
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// The territory in which the authorization has been granted
	Region []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=region,proto3" json:"region,omitempty"`
	// The status that is authorised e.g. approved. Intermediate states can be
	// tracked with cases and applications
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the current status was assigned
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// The time period in which the regulatory approval etc. is in effect, e.g. a
	// Marketing Authorization includes the date of authorization and/or
	// expiration date
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,17,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Condition for which the use of the regulated product applies
	Indication []*datatypes_go_proto.CodeableReference `protobuf:"bytes,18,rep,name=indication,proto3" json:"indication,omitempty"`
	// The intended use of the product, e.g. prevention, treatment
	IntendedUse *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=intended_use,json=intendedUse,proto3" json:"intended_use,omitempty"`
	// The legal/regulatory framework or reasons under which this authorization is
	// granted
	Basis []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=basis,proto3" json:"basis,omitempty"`
	// The organization that has been granted this authorization, by the regulator
	Holder *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=holder,proto3" json:"holder,omitempty"`
	// The regulatory authority or authorizing body granting the authorization
	Regulator *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=regulator,proto3" json:"regulator,omitempty"`
	// Additional information or supporting documentation about the authorization
	AttachedDocument []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=attached_document,json=attachedDocument,proto3" json:"attached_document,omitempty"`
	Case             *RegulatedAuthorization_Case    `protobuf:"bytes,24,opt,name=case,proto3" json:"case,omitempty"`
}

func (x *RegulatedAuthorization) Reset() {
	*x = RegulatedAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatedAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatedAuthorization) ProtoMessage() {}

func (x *RegulatedAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatedAuthorization.ProtoReflect.Descriptor instead.
func (*RegulatedAuthorization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescGZIP(), []int{0}
}

func (x *RegulatedAuthorization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RegulatedAuthorization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RegulatedAuthorization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *RegulatedAuthorization) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *RegulatedAuthorization) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *RegulatedAuthorization) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *RegulatedAuthorization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RegulatedAuthorization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *RegulatedAuthorization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *RegulatedAuthorization) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *RegulatedAuthorization) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegulatedAuthorization) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RegulatedAuthorization) GetRegion() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RegulatedAuthorization) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RegulatedAuthorization) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *RegulatedAuthorization) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *RegulatedAuthorization) GetIndication() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *RegulatedAuthorization) GetIntendedUse() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedUse
	}
	return nil
}

func (x *RegulatedAuthorization) GetBasis() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *RegulatedAuthorization) GetHolder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *RegulatedAuthorization) GetRegulator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Regulator
	}
	return nil
}

func (x *RegulatedAuthorization) GetAttachedDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AttachedDocument
	}
	return nil
}

func (x *RegulatedAuthorization) GetCase() *RegulatedAuthorization_Case {
	if x != nil {
		return x.Case
	}
	return nil
}

// The case or regulatory procedure for granting or amending a regulated
// authorization. Note: This area is subject to ongoing review and the
// workgroup is seeking implementer feedback on its use (see link at bottom of
// page)
type RegulatedAuthorization_Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier by which this case can be referenced
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The defining type of case
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The status associated with the case
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Date   *RegulatedAuthorization_Case_DateX  `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	// Applications submitted to obtain a regulated authorization. Steps within
	// the longer running case or procedure
	Application []*RegulatedAuthorization_Case `protobuf:"bytes,8,rep,name=application,proto3" json:"application,omitempty"`
}

func (x *RegulatedAuthorization_Case) Reset() {
	*x = RegulatedAuthorization_Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatedAuthorization_Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatedAuthorization_Case) ProtoMessage() {}

func (x *RegulatedAuthorization_Case) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatedAuthorization_Case.ProtoReflect.Descriptor instead.
func (*RegulatedAuthorization_Case) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RegulatedAuthorization_Case) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetDate() *RegulatedAuthorization_Case_DateX {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *RegulatedAuthorization_Case) GetApplication() []*RegulatedAuthorization_Case {
	if x != nil {
		return x.Application
	}
	return nil
}

// Relevant date for this case
type RegulatedAuthorization_Case_DateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*RegulatedAuthorization_Case_DateX_Period
	//	*RegulatedAuthorization_Case_DateX_DateTime
	Choice isRegulatedAuthorization_Case_DateX_Choice `protobuf_oneof:"choice"`
}

func (x *RegulatedAuthorization_Case_DateX) Reset() {
	*x = RegulatedAuthorization_Case_DateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatedAuthorization_Case_DateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatedAuthorization_Case_DateX) ProtoMessage() {}

func (x *RegulatedAuthorization_Case_DateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatedAuthorization_Case_DateX.ProtoReflect.Descriptor instead.
func (*RegulatedAuthorization_Case_DateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *RegulatedAuthorization_Case_DateX) GetChoice() isRegulatedAuthorization_Case_DateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *RegulatedAuthorization_Case_DateX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*RegulatedAuthorization_Case_DateX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *RegulatedAuthorization_Case_DateX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*RegulatedAuthorization_Case_DateX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isRegulatedAuthorization_Case_DateX_Choice interface {
	isRegulatedAuthorization_Case_DateX_Choice()
}

type RegulatedAuthorization_Case_DateX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type RegulatedAuthorization_Case_DateX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*RegulatedAuthorization_Case_DateX_Period) isRegulatedAuthorization_Case_DateX_Choice() {}

func (*RegulatedAuthorization_Case_DateX_DateTime) isRegulatedAuthorization_Case_DateX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDesc = []byte{
	0x0a, 0x47, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x14, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x9b, 0x03, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xe0, 0x02, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12, 0x4a,
	0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x11,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65, 0x1a, 0xaa, 0x05, 0x0a, 0x04, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x65, 0x58, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x87, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x64, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_goTypes = []interface{}{
	(*RegulatedAuthorization)(nil),               // 0: google.fhir.r5.core.RegulatedAuthorization
	(*RegulatedAuthorization_Case)(nil),          // 1: google.fhir.r5.core.RegulatedAuthorization.Case
	(*RegulatedAuthorization_Case_DateX)(nil),    // 2: google.fhir.r5.core.RegulatedAuthorization.Case.DateX
	(*datatypes_go_proto.Id)(nil),                // 3: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),              // 4: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),               // 5: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),              // 6: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),         // 7: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                            // 8: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),         // 9: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),        // 10: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),         // 11: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),   // 12: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Markdown)(nil),          // 13: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.DateTime)(nil),          // 14: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Period)(nil),            // 15: google.fhir.r5.core.Period
	(*datatypes_go_proto.CodeableReference)(nil), // 16: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.String)(nil),            // 17: google.fhir.r5.core.String
}
var file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_depIdxs = []int32{
	3,  // 0: google.fhir.r5.core.RegulatedAuthorization.id:type_name -> google.fhir.r5.core.Id
	4,  // 1: google.fhir.r5.core.RegulatedAuthorization.meta:type_name -> google.fhir.r5.core.Meta
	5,  // 2: google.fhir.r5.core.RegulatedAuthorization.implicit_rules:type_name -> google.fhir.r5.core.Uri
	6,  // 3: google.fhir.r5.core.RegulatedAuthorization.language:type_name -> google.fhir.r5.core.Code
	7,  // 4: google.fhir.r5.core.RegulatedAuthorization.text:type_name -> google.fhir.r5.core.Narrative
	8,  // 5: google.fhir.r5.core.RegulatedAuthorization.contained:type_name -> google.protobuf.Any
	9,  // 6: google.fhir.r5.core.RegulatedAuthorization.extension:type_name -> google.fhir.r5.core.Extension
	9,  // 7: google.fhir.r5.core.RegulatedAuthorization.modifier_extension:type_name -> google.fhir.r5.core.Extension
	10, // 8: google.fhir.r5.core.RegulatedAuthorization.identifier:type_name -> google.fhir.r5.core.Identifier
	11, // 9: google.fhir.r5.core.RegulatedAuthorization.subject:type_name -> google.fhir.r5.core.Reference
	12, // 10: google.fhir.r5.core.RegulatedAuthorization.type:type_name -> google.fhir.r5.core.CodeableConcept
	13, // 11: google.fhir.r5.core.RegulatedAuthorization.description:type_name -> google.fhir.r5.core.Markdown
	12, // 12: google.fhir.r5.core.RegulatedAuthorization.region:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 13: google.fhir.r5.core.RegulatedAuthorization.status:type_name -> google.fhir.r5.core.CodeableConcept
	14, // 14: google.fhir.r5.core.RegulatedAuthorization.status_date:type_name -> google.fhir.r5.core.DateTime
	15, // 15: google.fhir.r5.core.RegulatedAuthorization.validity_period:type_name -> google.fhir.r5.core.Period
	16, // 16: google.fhir.r5.core.RegulatedAuthorization.indication:type_name -> google.fhir.r5.core.CodeableReference
	12, // 17: google.fhir.r5.core.RegulatedAuthorization.intended_use:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 18: google.fhir.r5.core.RegulatedAuthorization.basis:type_name -> google.fhir.r5.core.CodeableConcept
	11, // 19: google.fhir.r5.core.RegulatedAuthorization.holder:type_name -> google.fhir.r5.core.Reference
	11, // 20: google.fhir.r5.core.RegulatedAuthorization.regulator:type_name -> google.fhir.r5.core.Reference
	11, // 21: google.fhir.r5.core.RegulatedAuthorization.attached_document:type_name -> google.fhir.r5.core.Reference
	1,  // 22: google.fhir.r5.core.RegulatedAuthorization.case:type_name -> google.fhir.r5.core.RegulatedAuthorization.Case
	17, // 23: google.fhir.r5.core.RegulatedAuthorization.Case.id:type_name -> google.fhir.r5.core.String
	9,  // 24: google.fhir.r5.core.RegulatedAuthorization.Case.extension:type_name -> google.fhir.r5.core.Extension
	9,  // 25: google.fhir.r5.core.RegulatedAuthorization.Case.modifier_extension:type_name -> google.fhir.r5.core.Extension
	10, // 26: google.fhir.r5.core.RegulatedAuthorization.Case.identifier:type_name -> google.fhir.r5.core.Identifier
	12, // 27: google.fhir.r5.core.RegulatedAuthorization.Case.type:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 28: google.fhir.r5.core.RegulatedAuthorization.Case.status:type_name -> google.fhir.r5.core.CodeableConcept
	2,  // 29: google.fhir.r5.core.RegulatedAuthorization.Case.date:type_name -> google.fhir.r5.core.RegulatedAuthorization.Case.DateX
	1,  // 30: google.fhir.r5.core.RegulatedAuthorization.Case.application:type_name -> google.fhir.r5.core.RegulatedAuthorization.Case
	15, // 31: google.fhir.r5.core.RegulatedAuthorization.Case.DateX.period:type_name -> google.fhir.r5.core.Period
	14, // 32: google.fhir.r5.core.RegulatedAuthorization.Case.DateX.date_time:type_name -> google.fhir.r5.core.DateTime
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatedAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatedAuthorization_Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatedAuthorization_Case_DateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RegulatedAuthorization_Case_DateX_Period)(nil),
		(*RegulatedAuthorization_Case_DateX_DateTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_regulated_authorization_proto_depIdxs = nil
}
