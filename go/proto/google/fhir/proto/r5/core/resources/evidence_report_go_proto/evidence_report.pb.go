//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/evidence_report.proto

package evidence_report_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for EvidenceReport.
// A EvidenceReport.
// See http://hl7.org/fhir/StructureDefinition/EvidenceReport
type EvidenceReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this EvidenceReport, represented as a globally
	// unique URI
	Url    *datatypes_go_proto.Uri    `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Status *EvidenceReport_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,12,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Unique identifier for the evidence report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,13,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Identifiers for articles that may relate to more than one evidence report
	RelatedIdentifier []*datatypes_go_proto.Identifier `protobuf:"bytes,14,rep,name=related_identifier,json=relatedIdentifier,proto3" json:"related_identifier,omitempty"`
	CiteAs            *EvidenceReport_CiteAsX          `protobuf:"bytes,15,opt,name=cite_as,json=citeAs,proto3" json:"cite_as,omitempty"`
	// Kind of report
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	// Used for footnotes and annotations
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,17,rep,name=note,proto3" json:"note,omitempty"`
	// Link, description or reference to artifact associated with the report
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,18,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	Subject         *EvidenceReport_Subject               `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Name of the publisher/steward (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	// Who authored the content
	Author []*datatypes_go_proto.ContactDetail `protobuf:"bytes,22,rep,name=author,proto3" json:"author,omitempty"`
	// Who edited the content
	Editor []*datatypes_go_proto.ContactDetail `protobuf:"bytes,23,rep,name=editor,proto3" json:"editor,omitempty"`
	// Who reviewed the content
	Reviewer []*datatypes_go_proto.ContactDetail `protobuf:"bytes,24,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	// Who endorsed the content
	Endorser  []*datatypes_go_proto.ContactDetail `protobuf:"bytes,25,rep,name=endorser,proto3" json:"endorser,omitempty"`
	RelatesTo []*EvidenceReport_RelatesTo         `protobuf:"bytes,26,rep,name=relates_to,json=relatesTo,proto3" json:"relates_to,omitempty"`
	Section   []*EvidenceReport_Section           `protobuf:"bytes,27,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *EvidenceReport) Reset() {
	*x = EvidenceReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport) ProtoMessage() {}

func (x *EvidenceReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport.ProtoReflect.Descriptor instead.
func (*EvidenceReport) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0}
}

func (x *EvidenceReport) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EvidenceReport) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EvidenceReport) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EvidenceReport) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EvidenceReport) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EvidenceReport) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EvidenceReport) GetStatus() *EvidenceReport_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EvidenceReport) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *EvidenceReport) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EvidenceReport) GetRelatedIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.RelatedIdentifier
	}
	return nil
}

func (x *EvidenceReport) GetCiteAs() *EvidenceReport_CiteAsX {
	if x != nil {
		return x.CiteAs
	}
	return nil
}

func (x *EvidenceReport) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EvidenceReport) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *EvidenceReport) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *EvidenceReport) GetSubject() *EvidenceReport_Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *EvidenceReport) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *EvidenceReport) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *EvidenceReport) GetAuthor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *EvidenceReport) GetEditor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *EvidenceReport) GetReviewer() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *EvidenceReport) GetEndorser() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Endorser
	}
	return nil
}

func (x *EvidenceReport) GetRelatesTo() []*EvidenceReport_RelatesTo {
	if x != nil {
		return x.RelatesTo
	}
	return nil
}

func (x *EvidenceReport) GetSection() []*EvidenceReport_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// draft | active | retired | unknown
type EvidenceReport_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceReport_StatusCode) Reset() {
	*x = EvidenceReport_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_StatusCode) ProtoMessage() {}

func (x *EvidenceReport_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_StatusCode.ProtoReflect.Descriptor instead.
func (*EvidenceReport_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EvidenceReport_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *EvidenceReport_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Citation for this report
type EvidenceReport_CiteAsX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceReport_CiteAsX_Reference
	//	*EvidenceReport_CiteAsX_Markdown
	Choice isEvidenceReport_CiteAsX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceReport_CiteAsX) Reset() {
	*x = EvidenceReport_CiteAsX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_CiteAsX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_CiteAsX) ProtoMessage() {}

func (x *EvidenceReport_CiteAsX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_CiteAsX.ProtoReflect.Descriptor instead.
func (*EvidenceReport_CiteAsX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 1}
}

func (m *EvidenceReport_CiteAsX) GetChoice() isEvidenceReport_CiteAsX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceReport_CiteAsX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*EvidenceReport_CiteAsX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *EvidenceReport_CiteAsX) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetChoice().(*EvidenceReport_CiteAsX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

type isEvidenceReport_CiteAsX_Choice interface {
	isEvidenceReport_CiteAsX_Choice()
}

type EvidenceReport_CiteAsX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type EvidenceReport_CiteAsX_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,2,opt,name=markdown,proto3,oneof"`
}

func (*EvidenceReport_CiteAsX_Reference) isEvidenceReport_CiteAsX_Choice() {}

func (*EvidenceReport_CiteAsX_Markdown) isEvidenceReport_CiteAsX_Choice() {}

// Focus of the report
type EvidenceReport_Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Characteristic    []*EvidenceReport_Subject_Characteristic `protobuf:"bytes,4,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
	// Footnotes and/or explanatory notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,5,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *EvidenceReport_Subject) Reset() {
	*x = EvidenceReport_Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_Subject) ProtoMessage() {}

func (x *EvidenceReport_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_Subject.ProtoReflect.Descriptor instead.
func (*EvidenceReport_Subject) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EvidenceReport_Subject) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_Subject) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport_Subject) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport_Subject) GetCharacteristic() []*EvidenceReport_Subject_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *EvidenceReport_Subject) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Relationships to other compositions/documents
type EvidenceReport_RelatesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Code              *EvidenceReport_RelatesTo_CodeType `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Target            *EvidenceReport_RelatesTo_Target   `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EvidenceReport_RelatesTo) Reset() {
	*x = EvidenceReport_RelatesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_RelatesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_RelatesTo) ProtoMessage() {}

func (x *EvidenceReport_RelatesTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_RelatesTo.ProtoReflect.Descriptor instead.
func (*EvidenceReport_RelatesTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EvidenceReport_RelatesTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_RelatesTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport_RelatesTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport_RelatesTo) GetCode() *EvidenceReport_RelatesTo_CodeType {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *EvidenceReport_RelatesTo) GetTarget() *EvidenceReport_RelatesTo_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Composition is broken into sections
type EvidenceReport_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for section (e.g. for ToC)
	Title *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Classification of section (recommended)
	Focus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=focus,proto3" json:"focus,omitempty"`
	// Classification of section by Resource
	FocusReference *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=focus_reference,json=focusReference,proto3" json:"focus_reference,omitempty"`
	// Who and/or what authored the section
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,7,rep,name=author,proto3" json:"author,omitempty"`
	// Text summary of the section, for human interpretation
	Text *datatypes_go_proto.Narrative    `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	Mode *EvidenceReport_Section_ModeCode `protobuf:"bytes,9,opt,name=mode,proto3" json:"mode,omitempty"`
	// Order of section entries
	OrderedBy *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	// Extensible classifiers as content
	EntryClassifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=entry_classifier,json=entryClassifier,proto3" json:"entry_classifier,omitempty"`
	// Reference to resources as content
	EntryReference []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=entry_reference,json=entryReference,proto3" json:"entry_reference,omitempty"`
	// Quantity as content
	EntryQuantity []*datatypes_go_proto.Quantity `protobuf:"bytes,13,rep,name=entry_quantity,json=entryQuantity,proto3" json:"entry_quantity,omitempty"`
	// Why the section is empty
	EmptyReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=empty_reason,json=emptyReason,proto3" json:"empty_reason,omitempty"`
	// Nested Section
	Section []*EvidenceReport_Section `protobuf:"bytes,15,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *EvidenceReport_Section) Reset() {
	*x = EvidenceReport_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_Section) ProtoMessage() {}

func (x *EvidenceReport_Section) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_Section.ProtoReflect.Descriptor instead.
func (*EvidenceReport_Section) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 4}
}

func (x *EvidenceReport_Section) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_Section) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport_Section) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport_Section) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *EvidenceReport_Section) GetFocus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *EvidenceReport_Section) GetFocusReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.FocusReference
	}
	return nil
}

func (x *EvidenceReport_Section) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *EvidenceReport_Section) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EvidenceReport_Section) GetMode() *EvidenceReport_Section_ModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *EvidenceReport_Section) GetOrderedBy() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OrderedBy
	}
	return nil
}

func (x *EvidenceReport_Section) GetEntryClassifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.EntryClassifier
	}
	return nil
}

func (x *EvidenceReport_Section) GetEntryReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EntryReference
	}
	return nil
}

func (x *EvidenceReport_Section) GetEntryQuantity() []*datatypes_go_proto.Quantity {
	if x != nil {
		return x.EntryQuantity
	}
	return nil
}

func (x *EvidenceReport_Section) GetEmptyReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.EmptyReason
	}
	return nil
}

func (x *EvidenceReport_Section) GetSection() []*EvidenceReport_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// Characteristic
type EvidenceReport_Subject_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Characteristic code
	Code  *datatypes_go_proto.CodeableConcept           `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *EvidenceReport_Subject_Characteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Is used to express not the characteristic
	Exclude *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=exclude,proto3" json:"exclude,omitempty"`
	// Timeframe for the characteristic
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *EvidenceReport_Subject_Characteristic) Reset() {
	*x = EvidenceReport_Subject_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_Subject_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_Subject_Characteristic) ProtoMessage() {}

func (x *EvidenceReport_Subject_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_Subject_Characteristic.ProtoReflect.Descriptor instead.
func (*EvidenceReport_Subject_Characteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *EvidenceReport_Subject_Characteristic) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetValue() *EvidenceReport_Subject_Characteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetExclude() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Characteristic value
type EvidenceReport_Subject_Characteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*EvidenceReport_Subject_Characteristic_ValueX_Reference
	//	*EvidenceReport_Subject_Characteristic_ValueX_CodeableConcept
	//	*EvidenceReport_Subject_Characteristic_ValueX_Boolean
	//	*EvidenceReport_Subject_Characteristic_ValueX_Quantity
	//	*EvidenceReport_Subject_Characteristic_ValueX_Range
	Choice isEvidenceReport_Subject_Characteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) Reset() {
	*x = EvidenceReport_Subject_Characteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_Subject_Characteristic_ValueX) ProtoMessage() {}

func (x *EvidenceReport_Subject_Characteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_Subject_Characteristic_ValueX.ProtoReflect.Descriptor instead.
func (*EvidenceReport_Subject_Characteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (m *EvidenceReport_Subject_Characteristic_ValueX) GetChoice() isEvidenceReport_Subject_Characteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*EvidenceReport_Subject_Characteristic_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*EvidenceReport_Subject_Characteristic_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*EvidenceReport_Subject_Characteristic_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*EvidenceReport_Subject_Characteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *EvidenceReport_Subject_Characteristic_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*EvidenceReport_Subject_Characteristic_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

type isEvidenceReport_Subject_Characteristic_ValueX_Choice interface {
	isEvidenceReport_Subject_Characteristic_ValueX_Choice()
}

type EvidenceReport_Subject_Characteristic_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type EvidenceReport_Subject_Characteristic_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type EvidenceReport_Subject_Characteristic_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=boolean,proto3,oneof"`
}

type EvidenceReport_Subject_Characteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,4,opt,name=quantity,proto3,oneof"`
}

type EvidenceReport_Subject_Characteristic_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

func (*EvidenceReport_Subject_Characteristic_ValueX_Reference) isEvidenceReport_Subject_Characteristic_ValueX_Choice() {
}

func (*EvidenceReport_Subject_Characteristic_ValueX_CodeableConcept) isEvidenceReport_Subject_Characteristic_ValueX_Choice() {
}

func (*EvidenceReport_Subject_Characteristic_ValueX_Boolean) isEvidenceReport_Subject_Characteristic_ValueX_Choice() {
}

func (*EvidenceReport_Subject_Characteristic_ValueX_Quantity) isEvidenceReport_Subject_Characteristic_ValueX_Choice() {
}

func (*EvidenceReport_Subject_Characteristic_ValueX_Range) isEvidenceReport_Subject_Characteristic_ValueX_Choice() {
}

// replaces | amends | appends | transforms | replacedWith | amendedWith |
// appendedWith | transformedWith
type EvidenceReport_RelatesTo_CodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ReportRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ReportRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceReport_RelatesTo_CodeType) Reset() {
	*x = EvidenceReport_RelatesTo_CodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_RelatesTo_CodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_RelatesTo_CodeType) ProtoMessage() {}

func (x *EvidenceReport_RelatesTo_CodeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_RelatesTo_CodeType.ProtoReflect.Descriptor instead.
func (*EvidenceReport_RelatesTo_CodeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *EvidenceReport_RelatesTo_CodeType) GetValue() codes_go_proto.ReportRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ReportRelationshipTypeCode_Value(0)
}

func (x *EvidenceReport_RelatesTo_CodeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_CodeType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Target of the relationship
type EvidenceReport_RelatesTo_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Target of the relationship URL
	Url *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// Target of the relationship Identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Target of the relationship Display
	Display *datatypes_go_proto.Markdown `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// Target of the relationship Resource reference
	Resource *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *EvidenceReport_RelatesTo_Target) Reset() {
	*x = EvidenceReport_RelatesTo_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_RelatesTo_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_RelatesTo_Target) ProtoMessage() {}

func (x *EvidenceReport_RelatesTo_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_RelatesTo_Target.ProtoReflect.Descriptor instead.
func (*EvidenceReport_RelatesTo_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *EvidenceReport_RelatesTo_Target) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetDisplay() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *EvidenceReport_RelatesTo_Target) GetResource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Resource
	}
	return nil
}

// working | snapshot | changes
type EvidenceReport_Section_ModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ListModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ListModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EvidenceReport_Section_ModeCode) Reset() {
	*x = EvidenceReport_Section_ModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceReport_Section_ModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceReport_Section_ModeCode) ProtoMessage() {}

func (x *EvidenceReport_Section_ModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceReport_Section_ModeCode.ProtoReflect.Descriptor instead.
func (*EvidenceReport_Section_ModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *EvidenceReport_Section_ModeCode) GetValue() codes_go_proto.ListModeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ListModeCode_Value(0)
}

func (x *EvidenceReport_Section_ModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EvidenceReport_Section_ModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_evidence_report_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x2e, 0x0a, 0x0e, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x2b, 0xf2, 0xb9, 0xe4, 0xa3, 0x0b,
	0x25, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x7c, 0x23,
	0x20, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x65, 0x41, 0x73, 0x58, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x65, 0x41, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3a,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xae, 0x02, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa8, 0x01, 0x0a,
	0x07, 0x43, 0x69, 0x74, 0x65, 0x41, 0x73, 0x58, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x09, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xc5, 0x06, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x1a, 0xe8, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x4e,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xdc,
	0x08, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x54, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0xb3, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x03, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x97, 0x0b,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x71, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9a, 0x02, 0x0a, 0x08, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x42, 0x7f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_goTypes = []interface{}{
	(*EvidenceReport)(nil),                               // 0: google.fhir.r5.core.EvidenceReport
	(*EvidenceReport_StatusCode)(nil),                    // 1: google.fhir.r5.core.EvidenceReport.StatusCode
	(*EvidenceReport_CiteAsX)(nil),                       // 2: google.fhir.r5.core.EvidenceReport.CiteAsX
	(*EvidenceReport_Subject)(nil),                       // 3: google.fhir.r5.core.EvidenceReport.Subject
	(*EvidenceReport_RelatesTo)(nil),                     // 4: google.fhir.r5.core.EvidenceReport.RelatesTo
	(*EvidenceReport_Section)(nil),                       // 5: google.fhir.r5.core.EvidenceReport.Section
	(*EvidenceReport_Subject_Characteristic)(nil),        // 6: google.fhir.r5.core.EvidenceReport.Subject.Characteristic
	(*EvidenceReport_Subject_Characteristic_ValueX)(nil), // 7: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX
	(*EvidenceReport_RelatesTo_CodeType)(nil),            // 8: google.fhir.r5.core.EvidenceReport.RelatesTo.CodeType
	(*EvidenceReport_RelatesTo_Target)(nil),              // 9: google.fhir.r5.core.EvidenceReport.RelatesTo.Target
	(*EvidenceReport_Section_ModeCode)(nil),              // 10: google.fhir.r5.core.EvidenceReport.Section.ModeCode
	(*datatypes_go_proto.Id)(nil),                        // 11: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                      // 12: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                       // 13: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                      // 14: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                 // 15: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                    // 16: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                 // 17: google.fhir.r5.core.Extension
	(*datatypes_go_proto.UsageContext)(nil),              // 18: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.Identifier)(nil),                // 19: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),           // 20: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Annotation)(nil),                // 21: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.RelatedArtifact)(nil),           // 22: google.fhir.r5.core.RelatedArtifact
	(*datatypes_go_proto.String)(nil),                    // 23: google.fhir.r5.core.String
	(*datatypes_go_proto.ContactDetail)(nil),             // 24: google.fhir.r5.core.ContactDetail
	(codes_go_proto.PublicationStatusCode_Value)(0),      // 25: google.fhir.r5.core.PublicationStatusCode.Value
	(*datatypes_go_proto.Reference)(nil),                 // 26: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Markdown)(nil),                  // 27: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Quantity)(nil),                  // 28: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Boolean)(nil),                   // 29: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Period)(nil),                    // 30: google.fhir.r5.core.Period
	(*datatypes_go_proto.Range)(nil),                     // 31: google.fhir.r5.core.Range
	(codes_go_proto.ReportRelationshipTypeCode_Value)(0), // 32: google.fhir.r5.core.ReportRelationshipTypeCode.Value
	(codes_go_proto.ListModeCode_Value)(0),               // 33: google.fhir.r5.core.ListModeCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_depIdxs = []int32{
	11, // 0: google.fhir.r5.core.EvidenceReport.id:type_name -> google.fhir.r5.core.Id
	12, // 1: google.fhir.r5.core.EvidenceReport.meta:type_name -> google.fhir.r5.core.Meta
	13, // 2: google.fhir.r5.core.EvidenceReport.implicit_rules:type_name -> google.fhir.r5.core.Uri
	14, // 3: google.fhir.r5.core.EvidenceReport.language:type_name -> google.fhir.r5.core.Code
	15, // 4: google.fhir.r5.core.EvidenceReport.text:type_name -> google.fhir.r5.core.Narrative
	16, // 5: google.fhir.r5.core.EvidenceReport.contained:type_name -> google.protobuf.Any
	17, // 6: google.fhir.r5.core.EvidenceReport.extension:type_name -> google.fhir.r5.core.Extension
	17, // 7: google.fhir.r5.core.EvidenceReport.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13, // 8: google.fhir.r5.core.EvidenceReport.url:type_name -> google.fhir.r5.core.Uri
	1,  // 9: google.fhir.r5.core.EvidenceReport.status:type_name -> google.fhir.r5.core.EvidenceReport.StatusCode
	18, // 10: google.fhir.r5.core.EvidenceReport.use_context:type_name -> google.fhir.r5.core.UsageContext
	19, // 11: google.fhir.r5.core.EvidenceReport.identifier:type_name -> google.fhir.r5.core.Identifier
	19, // 12: google.fhir.r5.core.EvidenceReport.related_identifier:type_name -> google.fhir.r5.core.Identifier
	2,  // 13: google.fhir.r5.core.EvidenceReport.cite_as:type_name -> google.fhir.r5.core.EvidenceReport.CiteAsX
	20, // 14: google.fhir.r5.core.EvidenceReport.type:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 15: google.fhir.r5.core.EvidenceReport.note:type_name -> google.fhir.r5.core.Annotation
	22, // 16: google.fhir.r5.core.EvidenceReport.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	3,  // 17: google.fhir.r5.core.EvidenceReport.subject:type_name -> google.fhir.r5.core.EvidenceReport.Subject
	23, // 18: google.fhir.r5.core.EvidenceReport.publisher:type_name -> google.fhir.r5.core.String
	24, // 19: google.fhir.r5.core.EvidenceReport.contact:type_name -> google.fhir.r5.core.ContactDetail
	24, // 20: google.fhir.r5.core.EvidenceReport.author:type_name -> google.fhir.r5.core.ContactDetail
	24, // 21: google.fhir.r5.core.EvidenceReport.editor:type_name -> google.fhir.r5.core.ContactDetail
	24, // 22: google.fhir.r5.core.EvidenceReport.reviewer:type_name -> google.fhir.r5.core.ContactDetail
	24, // 23: google.fhir.r5.core.EvidenceReport.endorser:type_name -> google.fhir.r5.core.ContactDetail
	4,  // 24: google.fhir.r5.core.EvidenceReport.relates_to:type_name -> google.fhir.r5.core.EvidenceReport.RelatesTo
	5,  // 25: google.fhir.r5.core.EvidenceReport.section:type_name -> google.fhir.r5.core.EvidenceReport.Section
	25, // 26: google.fhir.r5.core.EvidenceReport.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	23, // 27: google.fhir.r5.core.EvidenceReport.StatusCode.id:type_name -> google.fhir.r5.core.String
	17, // 28: google.fhir.r5.core.EvidenceReport.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	26, // 29: google.fhir.r5.core.EvidenceReport.CiteAsX.reference:type_name -> google.fhir.r5.core.Reference
	27, // 30: google.fhir.r5.core.EvidenceReport.CiteAsX.markdown:type_name -> google.fhir.r5.core.Markdown
	23, // 31: google.fhir.r5.core.EvidenceReport.Subject.id:type_name -> google.fhir.r5.core.String
	17, // 32: google.fhir.r5.core.EvidenceReport.Subject.extension:type_name -> google.fhir.r5.core.Extension
	17, // 33: google.fhir.r5.core.EvidenceReport.Subject.modifier_extension:type_name -> google.fhir.r5.core.Extension
	6,  // 34: google.fhir.r5.core.EvidenceReport.Subject.characteristic:type_name -> google.fhir.r5.core.EvidenceReport.Subject.Characteristic
	21, // 35: google.fhir.r5.core.EvidenceReport.Subject.note:type_name -> google.fhir.r5.core.Annotation
	23, // 36: google.fhir.r5.core.EvidenceReport.RelatesTo.id:type_name -> google.fhir.r5.core.String
	17, // 37: google.fhir.r5.core.EvidenceReport.RelatesTo.extension:type_name -> google.fhir.r5.core.Extension
	17, // 38: google.fhir.r5.core.EvidenceReport.RelatesTo.modifier_extension:type_name -> google.fhir.r5.core.Extension
	8,  // 39: google.fhir.r5.core.EvidenceReport.RelatesTo.code:type_name -> google.fhir.r5.core.EvidenceReport.RelatesTo.CodeType
	9,  // 40: google.fhir.r5.core.EvidenceReport.RelatesTo.target:type_name -> google.fhir.r5.core.EvidenceReport.RelatesTo.Target
	23, // 41: google.fhir.r5.core.EvidenceReport.Section.id:type_name -> google.fhir.r5.core.String
	17, // 42: google.fhir.r5.core.EvidenceReport.Section.extension:type_name -> google.fhir.r5.core.Extension
	17, // 43: google.fhir.r5.core.EvidenceReport.Section.modifier_extension:type_name -> google.fhir.r5.core.Extension
	23, // 44: google.fhir.r5.core.EvidenceReport.Section.title:type_name -> google.fhir.r5.core.String
	20, // 45: google.fhir.r5.core.EvidenceReport.Section.focus:type_name -> google.fhir.r5.core.CodeableConcept
	26, // 46: google.fhir.r5.core.EvidenceReport.Section.focus_reference:type_name -> google.fhir.r5.core.Reference
	26, // 47: google.fhir.r5.core.EvidenceReport.Section.author:type_name -> google.fhir.r5.core.Reference
	15, // 48: google.fhir.r5.core.EvidenceReport.Section.text:type_name -> google.fhir.r5.core.Narrative
	10, // 49: google.fhir.r5.core.EvidenceReport.Section.mode:type_name -> google.fhir.r5.core.EvidenceReport.Section.ModeCode
	20, // 50: google.fhir.r5.core.EvidenceReport.Section.ordered_by:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 51: google.fhir.r5.core.EvidenceReport.Section.entry_classifier:type_name -> google.fhir.r5.core.CodeableConcept
	26, // 52: google.fhir.r5.core.EvidenceReport.Section.entry_reference:type_name -> google.fhir.r5.core.Reference
	28, // 53: google.fhir.r5.core.EvidenceReport.Section.entry_quantity:type_name -> google.fhir.r5.core.Quantity
	20, // 54: google.fhir.r5.core.EvidenceReport.Section.empty_reason:type_name -> google.fhir.r5.core.CodeableConcept
	5,  // 55: google.fhir.r5.core.EvidenceReport.Section.section:type_name -> google.fhir.r5.core.EvidenceReport.Section
	23, // 56: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.id:type_name -> google.fhir.r5.core.String
	17, // 57: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.extension:type_name -> google.fhir.r5.core.Extension
	17, // 58: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	20, // 59: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.code:type_name -> google.fhir.r5.core.CodeableConcept
	7,  // 60: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.value:type_name -> google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX
	29, // 61: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.exclude:type_name -> google.fhir.r5.core.Boolean
	30, // 62: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.period:type_name -> google.fhir.r5.core.Period
	26, // 63: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	20, // 64: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	29, // 65: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	28, // 66: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	31, // 67: google.fhir.r5.core.EvidenceReport.Subject.Characteristic.ValueX.range:type_name -> google.fhir.r5.core.Range
	32, // 68: google.fhir.r5.core.EvidenceReport.RelatesTo.CodeType.value:type_name -> google.fhir.r5.core.ReportRelationshipTypeCode.Value
	23, // 69: google.fhir.r5.core.EvidenceReport.RelatesTo.CodeType.id:type_name -> google.fhir.r5.core.String
	17, // 70: google.fhir.r5.core.EvidenceReport.RelatesTo.CodeType.extension:type_name -> google.fhir.r5.core.Extension
	23, // 71: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.id:type_name -> google.fhir.r5.core.String
	17, // 72: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.extension:type_name -> google.fhir.r5.core.Extension
	17, // 73: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13, // 74: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.url:type_name -> google.fhir.r5.core.Uri
	19, // 75: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.identifier:type_name -> google.fhir.r5.core.Identifier
	27, // 76: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.display:type_name -> google.fhir.r5.core.Markdown
	26, // 77: google.fhir.r5.core.EvidenceReport.RelatesTo.Target.resource:type_name -> google.fhir.r5.core.Reference
	33, // 78: google.fhir.r5.core.EvidenceReport.Section.ModeCode.value:type_name -> google.fhir.r5.core.ListModeCode.Value
	23, // 79: google.fhir.r5.core.EvidenceReport.Section.ModeCode.id:type_name -> google.fhir.r5.core.String
	17, // 80: google.fhir.r5.core.EvidenceReport.Section.ModeCode.extension:type_name -> google.fhir.r5.core.Extension
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_evidence_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_CiteAsX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_RelatesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_Subject_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_Subject_Characteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_RelatesTo_CodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_RelatesTo_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceReport_Section_ModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EvidenceReport_CiteAsX_Reference)(nil),
		(*EvidenceReport_CiteAsX_Markdown)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EvidenceReport_Subject_Characteristic_ValueX_Reference)(nil),
		(*EvidenceReport_Subject_Characteristic_ValueX_CodeableConcept)(nil),
		(*EvidenceReport_Subject_Characteristic_ValueX_Boolean)(nil),
		(*EvidenceReport_Subject_Characteristic_ValueX_Quantity)(nil),
		(*EvidenceReport_Subject_Characteristic_ValueX_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_evidence_report_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_evidence_report_proto_depIdxs = nil
}
