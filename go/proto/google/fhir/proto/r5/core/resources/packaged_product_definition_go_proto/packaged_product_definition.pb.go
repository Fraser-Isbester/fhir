//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/packaged_product_definition.proto

package packaged_product_definition_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for PackagedProductDefinition.
// A medically related item or items, in a container or package.
// See http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition
type PackagedProductDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A unique identifier for this package as whole - not for the content of the
	// package
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// A name for this package. Typically as listed in a drug formulary,
	// catalogue, inventory etc
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// A high level category e.g. medicinal product, raw material, shipping
	// container etc
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// The product that this is a pack for
	PackageFor []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=package_for,json=packageFor,proto3" json:"package_for,omitempty"`
	// The status within the lifecycle of this item. High level - not intended to
	// duplicate details elsewhere e.g. legal status, or authorization/marketing
	// status
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the given status became applicable
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// A total of the complete count of contained items of a particular type/form,
	// independent of sub-packaging or organization. This can be considered as the
	// pack size. See also packaging.containedItem.amount (especially the long
	// definition)
	ContainedItemQuantity []*datatypes_go_proto.Quantity `protobuf:"bytes,16,rep,name=contained_item_quantity,json=containedItemQuantity,proto3" json:"contained_item_quantity,omitempty"`
	// Textual description. Note that this is not the name of the package or
	// product
	Description         *datatypes_go_proto.Markdown                     `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	LegalStatusOfSupply []*PackagedProductDefinition_LegalStatusOfSupply `protobuf:"bytes,18,rep,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Allows specifying that an item is on the market for sale, or that it is not
	// available, and the dates and locations associated
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,19,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// Identifies if the drug product is supplied with another item such as a
	// diluent or adjuvant
	CopackagedIndicator *datatypes_go_proto.Boolean `protobuf:"bytes,20,opt,name=copackaged_indicator,json=copackagedIndicator,proto3" json:"copackaged_indicator,omitempty"`
	// Manufacturer of this package type (multiple means these are all possible
	// manufacturers)
	Manufacturer []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Additional information or supporting documentation about the packaged
	// product
	AttachedDocument []*datatypes_go_proto.Reference      `protobuf:"bytes,22,rep,name=attached_document,json=attachedDocument,proto3" json:"attached_document,omitempty"`
	Packaging        *PackagedProductDefinition_Packaging `protobuf:"bytes,23,opt,name=packaging,proto3" json:"packaging,omitempty"`
	// Allows the key features to be recorded, such as "hospital pack", "nurse
	// prescribable"
	Characteristic []*PackagedProductDefinition_Packaging_Property `protobuf:"bytes,24,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
}

func (x *PackagedProductDefinition) Reset() {
	*x = PackagedProductDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition) ProtoMessage() {}

func (x *PackagedProductDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0}
}

func (x *PackagedProductDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PackagedProductDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *PackagedProductDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *PackagedProductDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *PackagedProductDefinition) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *PackagedProductDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PackagedProductDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PackagedProductDefinition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PackagedProductDefinition) GetPackageFor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PackageFor
	}
	return nil
}

func (x *PackagedProductDefinition) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PackagedProductDefinition) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *PackagedProductDefinition) GetContainedItemQuantity() []*datatypes_go_proto.Quantity {
	if x != nil {
		return x.ContainedItemQuantity
	}
	return nil
}

func (x *PackagedProductDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *PackagedProductDefinition) GetLegalStatusOfSupply() []*PackagedProductDefinition_LegalStatusOfSupply {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *PackagedProductDefinition) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *PackagedProductDefinition) GetCopackagedIndicator() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.CopackagedIndicator
	}
	return nil
}

func (x *PackagedProductDefinition) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *PackagedProductDefinition) GetAttachedDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AttachedDocument
	}
	return nil
}

func (x *PackagedProductDefinition) GetPackaging() *PackagedProductDefinition_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *PackagedProductDefinition) GetCharacteristic() []*PackagedProductDefinition_Packaging_Property {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

// The legal status of supply of the packaged item as classified by the
// regulator
type PackagedProductDefinition_LegalStatusOfSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The actual status of supply. In what situation this package type may be
	// supplied for use
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// The place where the legal status of supply applies
	Jurisdiction *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) Reset() {
	*x = PackagedProductDefinition_LegalStatusOfSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_LegalStatusOfSupply) ProtoMessage() {}

func (x *PackagedProductDefinition_LegalStatusOfSupply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_LegalStatusOfSupply.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_LegalStatusOfSupply) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PackagedProductDefinition_LegalStatusOfSupply) GetJurisdiction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

// A packaging item, as a container for medically related items, possibly with
// other packaging items within, or a packaging component, such as bottle cap
type PackagedProductDefinition_Packaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier that is specific to this particular part of the packaging.
	// Including possibly a Data Carrier Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The physical type of the container of the items
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Is this a part of the packaging (e.g. a cap or bottle stopper), rather
	// than the packaging itself (e.g. a bottle or vial)
	ComponentPart *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=component_part,json=componentPart,proto3" json:"component_part,omitempty"`
	// The quantity of this level of packaging in the package that contains it
	// (with the outermost level being 1)
	Quantity *datatypes_go_proto.Integer `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Material type of the package item
	Material []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=material,proto3" json:"material,omitempty"`
	// A possible alternate material for this part of the packaging, that is
	// allowed to be used instead of the usual material
	AlternateMaterial []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=alternate_material,json=alternateMaterial,proto3" json:"alternate_material,omitempty"`
	// Shelf Life and storage information
	ShelfLifeStorage []*datatypes_go_proto.ProductShelfLife `protobuf:"bytes,10,rep,name=shelf_life_storage,json=shelfLifeStorage,proto3" json:"shelf_life_storage,omitempty"`
	// Manufacturer of this packaging item (multiple means these are all
	// potential manufacturers)
	Manufacturer  []*datatypes_go_proto.Reference                      `protobuf:"bytes,11,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Property      []*PackagedProductDefinition_Packaging_Property      `protobuf:"bytes,12,rep,name=property,proto3" json:"property,omitempty"`
	ContainedItem []*PackagedProductDefinition_Packaging_ContainedItem `protobuf:"bytes,13,rep,name=contained_item,json=containedItem,proto3" json:"contained_item,omitempty"`
	// Allows containers (and parts of containers) within containers, still as a
	// part of single packaged product
	Packaging []*PackagedProductDefinition_Packaging `protobuf:"bytes,14,rep,name=packaging,proto3" json:"packaging,omitempty"`
}

func (x *PackagedProductDefinition_Packaging) Reset() {
	*x = PackagedProductDefinition_Packaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Packaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Packaging) ProtoMessage() {}

func (x *PackagedProductDefinition_Packaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Packaging.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Packaging) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PackagedProductDefinition_Packaging) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetComponentPart() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ComponentPart
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetQuantity() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetAlternateMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlternateMaterial
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetShelfLifeStorage() []*datatypes_go_proto.ProductShelfLife {
	if x != nil {
		return x.ShelfLifeStorage
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetProperty() []*PackagedProductDefinition_Packaging_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetContainedItem() []*PackagedProductDefinition_Packaging_ContainedItem {
	if x != nil {
		return x.ContainedItem
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging) GetPackaging() []*PackagedProductDefinition_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

// General characteristics of this item
type PackagedProductDefinition_Packaging_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code expressing the type of characteristic
	Type  *datatypes_go_proto.CodeableConcept                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *PackagedProductDefinition_Packaging_Property_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PackagedProductDefinition_Packaging_Property) Reset() {
	*x = PackagedProductDefinition_Packaging_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Packaging_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Packaging_Property) ProtoMessage() {}

func (x *PackagedProductDefinition_Packaging_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Packaging_Property.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Packaging_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PackagedProductDefinition_Packaging_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property) GetValue() *PackagedProductDefinition_Packaging_Property_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// The item(s) within the packaging
type PackagedProductDefinition_Packaging_ContainedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The actual item(s) of medication, as manufactured, or a device, or
	// other medically related item (food, biologicals, raw materials, medical
	// fluids, gases etc.), as contained in the package
	Item *datatypes_go_proto.CodeableReference `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// The number of this type of item within this packaging or for continuous
	// items such as liquids it is the quantity (for example 25ml). See also
	// PackagedProductDefinition.containedItemQuantity (especially the long
	// definition)
	Amount *datatypes_go_proto.Quantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) Reset() {
	*x = PackagedProductDefinition_Packaging_ContainedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Packaging_ContainedItem) ProtoMessage() {}

func (x *PackagedProductDefinition_Packaging_ContainedItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Packaging_ContainedItem.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Packaging_ContainedItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) GetItem() *datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_ContainedItem) GetAmount() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A value for the characteristic
type PackagedProductDefinition_Packaging_Property_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*PackagedProductDefinition_Packaging_Property_ValueX_CodeableConcept
	//	*PackagedProductDefinition_Packaging_Property_ValueX_Quantity
	//	*PackagedProductDefinition_Packaging_Property_ValueX_Date
	//	*PackagedProductDefinition_Packaging_Property_ValueX_Boolean
	//	*PackagedProductDefinition_Packaging_Property_ValueX_Attachment
	Choice isPackagedProductDefinition_Packaging_Property_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) Reset() {
	*x = PackagedProductDefinition_Packaging_Property_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Packaging_Property_ValueX) ProtoMessage() {}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Packaging_Property_ValueX.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Packaging_Property_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (m *PackagedProductDefinition_Packaging_Property_ValueX) GetChoice() isPackagedProductDefinition_Packaging_Property_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Packaging_Property_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Packaging_Property_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Packaging_Property_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Packaging_Property_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *PackagedProductDefinition_Packaging_Property_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Packaging_Property_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isPackagedProductDefinition_Packaging_Property_ValueX_Choice interface {
	isPackagedProductDefinition_Packaging_Property_ValueX_Choice()
}

type PackagedProductDefinition_Packaging_Property_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type PackagedProductDefinition_Packaging_Property_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type PackagedProductDefinition_Packaging_Property_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type PackagedProductDefinition_Packaging_Property_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type PackagedProductDefinition_Packaging_Property_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,5,opt,name=attachment,proto3,oneof"`
}

func (*PackagedProductDefinition_Packaging_Property_ValueX_CodeableConcept) isPackagedProductDefinition_Packaging_Property_ValueX_Choice() {
}

func (*PackagedProductDefinition_Packaging_Property_ValueX_Quantity) isPackagedProductDefinition_Packaging_Property_ValueX_Choice() {
}

func (*PackagedProductDefinition_Packaging_Property_ValueX_Date) isPackagedProductDefinition_Packaging_Property_ValueX_Choice() {
}

func (*PackagedProductDefinition_Packaging_Property_ValueX_Boolean) isPackagedProductDefinition_Packaging_Property_ValueX_Choice() {
}

func (*PackagedProductDefinition_Packaging_Property_ValueX_Attachment) isPackagedProductDefinition_Packaging_Property_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x21, 0x0a, 0x19, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x63,
	0x6f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x69, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xd3, 0x02,
	0x0a, 0x13, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x10, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x12,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x52,
	0x10, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x56, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a,
	0xc1, 0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x41,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xc4, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x4d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42,
	0x8b, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x01, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes = []interface{}{
	(*PackagedProductDefinition)(nil),                           // 0: google.fhir.r5.core.PackagedProductDefinition
	(*PackagedProductDefinition_LegalStatusOfSupply)(nil),       // 1: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply
	(*PackagedProductDefinition_Packaging)(nil),                 // 2: google.fhir.r5.core.PackagedProductDefinition.Packaging
	(*PackagedProductDefinition_Packaging_Property)(nil),        // 3: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property
	(*PackagedProductDefinition_Packaging_ContainedItem)(nil),   // 4: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem
	(*PackagedProductDefinition_Packaging_Property_ValueX)(nil), // 5: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX
	(*datatypes_go_proto.Id)(nil),                               // 6: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                             // 7: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                              // 8: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                             // 9: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                        // 10: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                           // 11: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                        // 12: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                       // 13: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                           // 14: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                  // 15: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                        // 16: google.fhir.r5.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                         // 17: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Quantity)(nil),                         // 18: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Markdown)(nil),                         // 19: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.MarketingStatus)(nil),                  // 20: google.fhir.r5.core.MarketingStatus
	(*datatypes_go_proto.Boolean)(nil),                          // 21: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Integer)(nil),                          // 22: google.fhir.r5.core.Integer
	(*datatypes_go_proto.ProductShelfLife)(nil),                 // 23: google.fhir.r5.core.ProductShelfLife
	(*datatypes_go_proto.CodeableReference)(nil),                // 24: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Date)(nil),                             // 25: google.fhir.r5.core.Date
	(*datatypes_go_proto.Attachment)(nil),                       // 26: google.fhir.r5.core.Attachment
}
var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs = []int32{
	6,  // 0: google.fhir.r5.core.PackagedProductDefinition.id:type_name -> google.fhir.r5.core.Id
	7,  // 1: google.fhir.r5.core.PackagedProductDefinition.meta:type_name -> google.fhir.r5.core.Meta
	8,  // 2: google.fhir.r5.core.PackagedProductDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	9,  // 3: google.fhir.r5.core.PackagedProductDefinition.language:type_name -> google.fhir.r5.core.Code
	10, // 4: google.fhir.r5.core.PackagedProductDefinition.text:type_name -> google.fhir.r5.core.Narrative
	11, // 5: google.fhir.r5.core.PackagedProductDefinition.contained:type_name -> google.protobuf.Any
	12, // 6: google.fhir.r5.core.PackagedProductDefinition.extension:type_name -> google.fhir.r5.core.Extension
	12, // 7: google.fhir.r5.core.PackagedProductDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13, // 8: google.fhir.r5.core.PackagedProductDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	14, // 9: google.fhir.r5.core.PackagedProductDefinition.name:type_name -> google.fhir.r5.core.String
	15, // 10: google.fhir.r5.core.PackagedProductDefinition.type:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 11: google.fhir.r5.core.PackagedProductDefinition.package_for:type_name -> google.fhir.r5.core.Reference
	15, // 12: google.fhir.r5.core.PackagedProductDefinition.status:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 13: google.fhir.r5.core.PackagedProductDefinition.status_date:type_name -> google.fhir.r5.core.DateTime
	18, // 14: google.fhir.r5.core.PackagedProductDefinition.contained_item_quantity:type_name -> google.fhir.r5.core.Quantity
	19, // 15: google.fhir.r5.core.PackagedProductDefinition.description:type_name -> google.fhir.r5.core.Markdown
	1,  // 16: google.fhir.r5.core.PackagedProductDefinition.legal_status_of_supply:type_name -> google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply
	20, // 17: google.fhir.r5.core.PackagedProductDefinition.marketing_status:type_name -> google.fhir.r5.core.MarketingStatus
	21, // 18: google.fhir.r5.core.PackagedProductDefinition.copackaged_indicator:type_name -> google.fhir.r5.core.Boolean
	16, // 19: google.fhir.r5.core.PackagedProductDefinition.manufacturer:type_name -> google.fhir.r5.core.Reference
	16, // 20: google.fhir.r5.core.PackagedProductDefinition.attached_document:type_name -> google.fhir.r5.core.Reference
	2,  // 21: google.fhir.r5.core.PackagedProductDefinition.packaging:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging
	3,  // 22: google.fhir.r5.core.PackagedProductDefinition.characteristic:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging.Property
	14, // 23: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply.id:type_name -> google.fhir.r5.core.String
	12, // 24: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply.extension:type_name -> google.fhir.r5.core.Extension
	12, // 25: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 26: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply.code:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 27: google.fhir.r5.core.PackagedProductDefinition.LegalStatusOfSupply.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	14, // 28: google.fhir.r5.core.PackagedProductDefinition.Packaging.id:type_name -> google.fhir.r5.core.String
	12, // 29: google.fhir.r5.core.PackagedProductDefinition.Packaging.extension:type_name -> google.fhir.r5.core.Extension
	12, // 30: google.fhir.r5.core.PackagedProductDefinition.Packaging.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13, // 31: google.fhir.r5.core.PackagedProductDefinition.Packaging.identifier:type_name -> google.fhir.r5.core.Identifier
	15, // 32: google.fhir.r5.core.PackagedProductDefinition.Packaging.type:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 33: google.fhir.r5.core.PackagedProductDefinition.Packaging.component_part:type_name -> google.fhir.r5.core.Boolean
	22, // 34: google.fhir.r5.core.PackagedProductDefinition.Packaging.quantity:type_name -> google.fhir.r5.core.Integer
	15, // 35: google.fhir.r5.core.PackagedProductDefinition.Packaging.material:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 36: google.fhir.r5.core.PackagedProductDefinition.Packaging.alternate_material:type_name -> google.fhir.r5.core.CodeableConcept
	23, // 37: google.fhir.r5.core.PackagedProductDefinition.Packaging.shelf_life_storage:type_name -> google.fhir.r5.core.ProductShelfLife
	16, // 38: google.fhir.r5.core.PackagedProductDefinition.Packaging.manufacturer:type_name -> google.fhir.r5.core.Reference
	3,  // 39: google.fhir.r5.core.PackagedProductDefinition.Packaging.property:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging.Property
	4,  // 40: google.fhir.r5.core.PackagedProductDefinition.Packaging.contained_item:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem
	2,  // 41: google.fhir.r5.core.PackagedProductDefinition.Packaging.packaging:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging
	14, // 42: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.id:type_name -> google.fhir.r5.core.String
	12, // 43: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.extension:type_name -> google.fhir.r5.core.Extension
	12, // 44: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 45: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.type:type_name -> google.fhir.r5.core.CodeableConcept
	5,  // 46: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.value:type_name -> google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX
	14, // 47: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem.id:type_name -> google.fhir.r5.core.String
	12, // 48: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem.extension:type_name -> google.fhir.r5.core.Extension
	12, // 49: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24, // 50: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem.item:type_name -> google.fhir.r5.core.CodeableReference
	18, // 51: google.fhir.r5.core.PackagedProductDefinition.Packaging.ContainedItem.amount:type_name -> google.fhir.r5.core.Quantity
	15, // 52: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 53: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	25, // 54: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX.date:type_name -> google.fhir.r5.core.Date
	21, // 55: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	26, // 56: google.fhir.r5.core.PackagedProductDefinition.Packaging.Property.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_LegalStatusOfSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Packaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Packaging_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Packaging_ContainedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Packaging_Property_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PackagedProductDefinition_Packaging_Property_ValueX_CodeableConcept)(nil),
		(*PackagedProductDefinition_Packaging_Property_ValueX_Quantity)(nil),
		(*PackagedProductDefinition_Packaging_Property_ValueX_Date)(nil),
		(*PackagedProductDefinition_Packaging_Property_ValueX_Boolean)(nil),
		(*PackagedProductDefinition_Packaging_Property_ValueX_Attachment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs = nil
}
