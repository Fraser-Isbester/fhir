//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/subscription_topic.proto

package subscription_topic_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/valuesets_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubscriptionTopic.
// The definition of a specific topic for triggering events within the
// Subscriptions framework. See
// http://hl7.org/fhir/StructureDefinition/SubscriptionTopic
type SubscriptionTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this subscription topic, represented as an
	// absolute URI (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Business identifier for subscription topic
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the subscription topic
	Version          *datatypes_go_proto.String           `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	VersionAlgorithm *SubscriptionTopic_VersionAlgorithmX `protobuf:"bytes,13,opt,name=version_algorithm,json=versionAlgorithm,proto3" json:"version_algorithm,omitempty"`
	// Name for this subscription topic (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this subscription topic (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=title,proto3" json:"title,omitempty"`
	// Based on FHIR protocol or definition
	DerivedFrom []*datatypes_go_proto.Canonical `protobuf:"bytes,16,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Status      *SubscriptionTopic_StatusCode   `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,18,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date status first applied
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,19,opt,name=date,proto3" json:"date,omitempty"`
	// The name of the individual or organization that published the
	// SubscriptionTopic
	Publisher *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the SubscriptionTopic
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,23,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction of the SubscriptionTopic (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Why this SubscriptionTopic is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,25,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,26,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Copyright holder and year(s)
	CopyrightLabel *datatypes_go_proto.String `protobuf:"bytes,27,opt,name=copyright_label,json=copyrightLabel,proto3" json:"copyright_label,omitempty"`
	// When SubscriptionTopic is/was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,28,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// Date the Subscription Topic was last reviewed by the publisher
	LastReviewDate *datatypes_go_proto.Date `protobuf:"bytes,29,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	// The effective date range for the SubscriptionTopic
	EffectivePeriod   *datatypes_go_proto.Period             `protobuf:"bytes,30,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	ResourceTrigger   []*SubscriptionTopic_ResourceTrigger   `protobuf:"bytes,31,rep,name=resource_trigger,json=resourceTrigger,proto3" json:"resource_trigger,omitempty"`
	EventTrigger      []*SubscriptionTopic_EventTrigger      `protobuf:"bytes,32,rep,name=event_trigger,json=eventTrigger,proto3" json:"event_trigger,omitempty"`
	CanFilterBy       []*SubscriptionTopic_CanFilterBy       `protobuf:"bytes,33,rep,name=can_filter_by,json=canFilterBy,proto3" json:"can_filter_by,omitempty"`
	NotificationShape []*SubscriptionTopic_NotificationShape `protobuf:"bytes,34,rep,name=notification_shape,json=notificationShape,proto3" json:"notification_shape,omitempty"`
}

func (x *SubscriptionTopic) Reset() {
	*x = SubscriptionTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic) ProtoMessage() {}

func (x *SubscriptionTopic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionTopic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubscriptionTopic) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubscriptionTopic) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubscriptionTopic) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubscriptionTopic) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubscriptionTopic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *SubscriptionTopic) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubscriptionTopic) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SubscriptionTopic) GetVersionAlgorithm() *SubscriptionTopic_VersionAlgorithmX {
	if x != nil {
		return x.VersionAlgorithm
	}
	return nil
}

func (x *SubscriptionTopic) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubscriptionTopic) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *SubscriptionTopic) GetDerivedFrom() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *SubscriptionTopic) GetStatus() *SubscriptionTopic_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubscriptionTopic) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *SubscriptionTopic) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SubscriptionTopic) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *SubscriptionTopic) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *SubscriptionTopic) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubscriptionTopic) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *SubscriptionTopic) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *SubscriptionTopic) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *SubscriptionTopic) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *SubscriptionTopic) GetCopyrightLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.CopyrightLabel
	}
	return nil
}

func (x *SubscriptionTopic) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *SubscriptionTopic) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *SubscriptionTopic) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *SubscriptionTopic) GetResourceTrigger() []*SubscriptionTopic_ResourceTrigger {
	if x != nil {
		return x.ResourceTrigger
	}
	return nil
}

func (x *SubscriptionTopic) GetEventTrigger() []*SubscriptionTopic_EventTrigger {
	if x != nil {
		return x.EventTrigger
	}
	return nil
}

func (x *SubscriptionTopic) GetCanFilterBy() []*SubscriptionTopic_CanFilterBy {
	if x != nil {
		return x.CanFilterBy
	}
	return nil
}

func (x *SubscriptionTopic) GetNotificationShape() []*SubscriptionTopic_NotificationShape {
	if x != nil {
		return x.NotificationShape
	}
	return nil
}

// How to compare versions
type SubscriptionTopic_VersionAlgorithmX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*SubscriptionTopic_VersionAlgorithmX_StringValue
	//	*SubscriptionTopic_VersionAlgorithmX_Coding
	Choice isSubscriptionTopic_VersionAlgorithmX_Choice `protobuf_oneof:"choice"`
}

func (x *SubscriptionTopic_VersionAlgorithmX) Reset() {
	*x = SubscriptionTopic_VersionAlgorithmX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_VersionAlgorithmX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_VersionAlgorithmX) ProtoMessage() {}

func (x *SubscriptionTopic_VersionAlgorithmX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_VersionAlgorithmX.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_VersionAlgorithmX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 0}
}

func (m *SubscriptionTopic_VersionAlgorithmX) GetChoice() isSubscriptionTopic_VersionAlgorithmX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubscriptionTopic_VersionAlgorithmX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubscriptionTopic_VersionAlgorithmX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *SubscriptionTopic_VersionAlgorithmX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*SubscriptionTopic_VersionAlgorithmX_Coding); ok {
		return x.Coding
	}
	return nil
}

type isSubscriptionTopic_VersionAlgorithmX_Choice interface {
	isSubscriptionTopic_VersionAlgorithmX_Choice()
}

type SubscriptionTopic_VersionAlgorithmX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type SubscriptionTopic_VersionAlgorithmX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

func (*SubscriptionTopic_VersionAlgorithmX_StringValue) isSubscriptionTopic_VersionAlgorithmX_Choice() {
}

func (*SubscriptionTopic_VersionAlgorithmX_Coding) isSubscriptionTopic_VersionAlgorithmX_Choice() {}

// draft | active | retired | unknown
type SubscriptionTopic_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_StatusCode) Reset() {
	*x = SubscriptionTopic_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_StatusCode) ProtoMessage() {}

func (x *SubscriptionTopic_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_StatusCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubscriptionTopic_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *SubscriptionTopic_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Definition of a resource-based trigger for the subscription topic
type SubscriptionTopic_ResourceTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Text representation of the resource trigger
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Data Type or Resource (reference to definition) for this trigger
	// definition
	Resource             *datatypes_go_proto.Uri                                       `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	SupportedInteraction []*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode `protobuf:"bytes,6,rep,name=supported_interaction,json=supportedInteraction,proto3" json:"supported_interaction,omitempty"`
	QueryCriteria        *SubscriptionTopic_ResourceTrigger_QueryCriteria              `protobuf:"bytes,7,opt,name=query_criteria,json=queryCriteria,proto3" json:"query_criteria,omitempty"`
	// FHIRPath based trigger rule
	FhirPathCriteria *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=fhir_path_criteria,json=fhirPathCriteria,proto3" json:"fhir_path_criteria,omitempty"`
}

func (x *SubscriptionTopic_ResourceTrigger) Reset() {
	*x = SubscriptionTopic_ResourceTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_ResourceTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_ResourceTrigger) ProtoMessage() {}

func (x *SubscriptionTopic_ResourceTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_ResourceTrigger.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_ResourceTrigger) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SubscriptionTopic_ResourceTrigger) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetResource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetSupportedInteraction() []*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode {
	if x != nil {
		return x.SupportedInteraction
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetQueryCriteria() *SubscriptionTopic_ResourceTrigger_QueryCriteria {
	if x != nil {
		return x.QueryCriteria
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger) GetFhirPathCriteria() *datatypes_go_proto.String {
	if x != nil {
		return x.FhirPathCriteria
	}
	return nil
}

// Event definitions the SubscriptionTopic
type SubscriptionTopic_EventTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Text representation of the event trigger
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Event which can trigger a notification from the SubscriptionTopic
	Event *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	// Data Type or Resource (reference to definition) for this trigger
	// definition
	Resource *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *SubscriptionTopic_EventTrigger) Reset() {
	*x = SubscriptionTopic_EventTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_EventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_EventTrigger) ProtoMessage() {}

func (x *SubscriptionTopic_EventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_EventTrigger.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_EventTrigger) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SubscriptionTopic_EventTrigger) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_EventTrigger) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic_EventTrigger) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic_EventTrigger) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubscriptionTopic_EventTrigger) GetEvent() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SubscriptionTopic_EventTrigger) GetResource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Properties by which a Subscription can filter notifications from the
// SubscriptionTopic
type SubscriptionTopic_CanFilterBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Description of this filter parameter
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// URL of the triggering Resource that this filter applies to
	Resource *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	// Human-readable and computation-friendly name for a filter parameter
	// usable by subscriptions on this topic, via
	// Subscription.filterBy.filterParameter
	FilterParameter *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=filter_parameter,json=filterParameter,proto3" json:"filter_parameter,omitempty"`
	// Canonical URL for a filterParameter definition
	FilterDefinition *datatypes_go_proto.Uri                         `protobuf:"bytes,7,opt,name=filter_definition,json=filterDefinition,proto3" json:"filter_definition,omitempty"`
	Comparator       []*SubscriptionTopic_CanFilterBy_ComparatorCode `protobuf:"bytes,8,rep,name=comparator,proto3" json:"comparator,omitempty"`
	Modifier         []*SubscriptionTopic_CanFilterBy_ModifierCode   `protobuf:"bytes,9,rep,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *SubscriptionTopic_CanFilterBy) Reset() {
	*x = SubscriptionTopic_CanFilterBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_CanFilterBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_CanFilterBy) ProtoMessage() {}

func (x *SubscriptionTopic_CanFilterBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_CanFilterBy.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_CanFilterBy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SubscriptionTopic_CanFilterBy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetResource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetFilterParameter() *datatypes_go_proto.String {
	if x != nil {
		return x.FilterParameter
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetFilterDefinition() *datatypes_go_proto.Uri {
	if x != nil {
		return x.FilterDefinition
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetComparator() []*SubscriptionTopic_CanFilterBy_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy) GetModifier() []*SubscriptionTopic_CanFilterBy_ModifierCode {
	if x != nil {
		return x.Modifier
	}
	return nil
}

// Properties for describing the shape of notifications generated by this
// topic
type SubscriptionTopic_NotificationShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// URL of the Resource that is the focus (main) resource in a notification
	// shape
	Resource *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Include directives, rooted in the resource for this shape
	Include []*datatypes_go_proto.String `protobuf:"bytes,5,rep,name=include,proto3" json:"include,omitempty"`
	// Reverse include directives, rooted in the resource for this shape
	RevInclude []*datatypes_go_proto.String `protobuf:"bytes,6,rep,name=rev_include,json=revInclude,proto3" json:"rev_include,omitempty"`
}

func (x *SubscriptionTopic_NotificationShape) Reset() {
	*x = SubscriptionTopic_NotificationShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_NotificationShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_NotificationShape) ProtoMessage() {}

func (x *SubscriptionTopic_NotificationShape) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_NotificationShape.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_NotificationShape) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SubscriptionTopic_NotificationShape) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_NotificationShape) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic_NotificationShape) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic_NotificationShape) GetResource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SubscriptionTopic_NotificationShape) GetInclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *SubscriptionTopic_NotificationShape) GetRevInclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.RevInclude
	}
	return nil
}

// create | update | delete
type SubscriptionTopic_ResourceTrigger_SupportedInteractionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.InteractionTriggerValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.InteractionTriggerValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) Reset() {
	*x = SubscriptionTopic_ResourceTrigger_SupportedInteractionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) ProtoMessage() {}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_ResourceTrigger_SupportedInteractionCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) GetValue() valuesets_go_proto.InteractionTriggerValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.InteractionTriggerValueSet_Value(0)
}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_SupportedInteractionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Query based trigger rule
type SubscriptionTopic_ResourceTrigger_QueryCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Rule applied to previous resource state
	Previous        *datatypes_go_proto.String                                           `protobuf:"bytes,4,opt,name=previous,proto3" json:"previous,omitempty"`
	ResultForCreate *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode `protobuf:"bytes,5,opt,name=result_for_create,json=resultForCreate,proto3" json:"result_for_create,omitempty"`
	// Rule applied to current resource state
	Current         *datatypes_go_proto.String                                           `protobuf:"bytes,6,opt,name=current,proto3" json:"current,omitempty"`
	ResultForDelete *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode `protobuf:"bytes,7,opt,name=result_for_delete,json=resultForDelete,proto3" json:"result_for_delete,omitempty"`
	// Both must be true flag
	RequireBoth *datatypes_go_proto.Boolean `protobuf:"bytes,8,opt,name=require_both,json=requireBoth,proto3" json:"require_both,omitempty"`
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) Reset() {
	*x = SubscriptionTopic_ResourceTrigger_QueryCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_ResourceTrigger_QueryCriteria) ProtoMessage() {}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_ResourceTrigger_QueryCriteria.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_ResourceTrigger_QueryCriteria) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetPrevious() *datatypes_go_proto.String {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetResultForCreate() *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode {
	if x != nil {
		return x.ResultForCreate
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetCurrent() *datatypes_go_proto.String {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetResultForDelete() *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode {
	if x != nil {
		return x.ResultForDelete
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria) GetRequireBoth() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.RequireBoth
	}
	return nil
}

// test-passes | test-fails
type SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CriteriaNotExistsBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.CriteriaNotExistsBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) Reset() {
	*x = SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) ProtoMessage() {}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) GetValue() codes_go_proto.CriteriaNotExistsBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CriteriaNotExistsBehaviorCode_Value(0)
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// test-passes | test-fails
type SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CriteriaNotExistsBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.CriteriaNotExistsBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) Reset() {
	*x = SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) ProtoMessage() {}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 2, 1, 1}
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) GetValue() codes_go_proto.CriteriaNotExistsBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CriteriaNotExistsBehaviorCode_Value(0)
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// eq | ne | gt | lt | ge | le | sa | eb | ap
type SubscriptionTopic_CanFilterBy_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SearchComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.SearchComparatorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) Reset() {
	*x = SubscriptionTopic_CanFilterBy_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_CanFilterBy_ComparatorCode) ProtoMessage() {}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_CanFilterBy_ComparatorCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_CanFilterBy_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) GetValue() codes_go_proto.SearchComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SearchComparatorCode_Value(0)
}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy_ComparatorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// missing | exact | contains | not | text | in | not-in | below | above |
// type | identifier | of-type | code-text | text-advanced | iterate
type SubscriptionTopic_CanFilterBy_ModifierCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SearchModifierCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.SearchModifierCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) Reset() {
	*x = SubscriptionTopic_CanFilterBy_ModifierCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTopic_CanFilterBy_ModifierCode) ProtoMessage() {}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTopic_CanFilterBy_ModifierCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTopic_CanFilterBy_ModifierCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) GetValue() codes_go_proto.SearchModifierCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SearchModifierCode_Value(0)
}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTopic_CanFilterBy_ModifierCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7,
	0x37, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x58, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x3e, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x61, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x58, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x61, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x67, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x11, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x58,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf3, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x49, 0x0a, 0x12, 0x66, 0x68, 0x69, 0x72,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x66, 0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x1a, 0xc2, 0x02, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa2, 0x0a, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x62, 0x6f,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42,
	0x6f, 0x74, 0x68, 0x1a, 0xca, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x78, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2d, 0x63, 0x72, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xca, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x78, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2d, 0x63, 0x72, 0x2d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x8b, 0x03,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xfa, 0x09, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x43, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x43, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0xb0, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xaf, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x80, 0x03, 0x0a, 0x11, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a, 0x45, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x82, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07,
	0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_goTypes = []interface{}{
	(*SubscriptionTopic)(nil),                                                   // 0: google.fhir.r5.core.SubscriptionTopic
	(*SubscriptionTopic_VersionAlgorithmX)(nil),                                 // 1: google.fhir.r5.core.SubscriptionTopic.VersionAlgorithmX
	(*SubscriptionTopic_StatusCode)(nil),                                        // 2: google.fhir.r5.core.SubscriptionTopic.StatusCode
	(*SubscriptionTopic_ResourceTrigger)(nil),                                   // 3: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger
	(*SubscriptionTopic_EventTrigger)(nil),                                      // 4: google.fhir.r5.core.SubscriptionTopic.EventTrigger
	(*SubscriptionTopic_CanFilterBy)(nil),                                       // 5: google.fhir.r5.core.SubscriptionTopic.CanFilterBy
	(*SubscriptionTopic_NotificationShape)(nil),                                 // 6: google.fhir.r5.core.SubscriptionTopic.NotificationShape
	(*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode)(nil),          // 7: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.SupportedInteractionCode
	(*SubscriptionTopic_ResourceTrigger_QueryCriteria)(nil),                     // 8: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria
	(*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode)(nil), // 9: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForCreateCode
	(*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode)(nil), // 10: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForDeleteCode
	(*SubscriptionTopic_CanFilterBy_ComparatorCode)(nil),                        // 11: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ComparatorCode
	(*SubscriptionTopic_CanFilterBy_ModifierCode)(nil),                          // 12: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ModifierCode
	(*datatypes_go_proto.Id)(nil),                                               // 13: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                             // 14: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                              // 15: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                             // 16: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                        // 17: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                           // 18: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                        // 19: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                       // 20: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                                           // 21: google.fhir.r5.core.String
	(*datatypes_go_proto.Canonical)(nil),                                        // 22: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.Boolean)(nil),                                          // 23: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                                         // 24: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),                                    // 25: google.fhir.r5.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                                         // 26: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.UsageContext)(nil),                                     // 27: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.CodeableConcept)(nil),                                  // 28: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Date)(nil),                                             // 29: google.fhir.r5.core.Date
	(*datatypes_go_proto.Period)(nil),                                           // 30: google.fhir.r5.core.Period
	(*datatypes_go_proto.Coding)(nil),                                           // 31: google.fhir.r5.core.Coding
	(codes_go_proto.PublicationStatusCode_Value)(0),                             // 32: google.fhir.r5.core.PublicationStatusCode.Value
	(valuesets_go_proto.InteractionTriggerValueSet_Value)(0),                    // 33: google.fhir.r5.core.InteractionTriggerValueSet.Value
	(codes_go_proto.CriteriaNotExistsBehaviorCode_Value)(0),                     // 34: google.fhir.r5.core.CriteriaNotExistsBehaviorCode.Value
	(codes_go_proto.SearchComparatorCode_Value)(0),                              // 35: google.fhir.r5.core.SearchComparatorCode.Value
	(codes_go_proto.SearchModifierCode_Value)(0),                                // 36: google.fhir.r5.core.SearchModifierCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_depIdxs = []int32{
	13, // 0: google.fhir.r5.core.SubscriptionTopic.id:type_name -> google.fhir.r5.core.Id
	14, // 1: google.fhir.r5.core.SubscriptionTopic.meta:type_name -> google.fhir.r5.core.Meta
	15, // 2: google.fhir.r5.core.SubscriptionTopic.implicit_rules:type_name -> google.fhir.r5.core.Uri
	16, // 3: google.fhir.r5.core.SubscriptionTopic.language:type_name -> google.fhir.r5.core.Code
	17, // 4: google.fhir.r5.core.SubscriptionTopic.text:type_name -> google.fhir.r5.core.Narrative
	18, // 5: google.fhir.r5.core.SubscriptionTopic.contained:type_name -> google.protobuf.Any
	19, // 6: google.fhir.r5.core.SubscriptionTopic.extension:type_name -> google.fhir.r5.core.Extension
	19, // 7: google.fhir.r5.core.SubscriptionTopic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 8: google.fhir.r5.core.SubscriptionTopic.url:type_name -> google.fhir.r5.core.Uri
	20, // 9: google.fhir.r5.core.SubscriptionTopic.identifier:type_name -> google.fhir.r5.core.Identifier
	21, // 10: google.fhir.r5.core.SubscriptionTopic.version:type_name -> google.fhir.r5.core.String
	1,  // 11: google.fhir.r5.core.SubscriptionTopic.version_algorithm:type_name -> google.fhir.r5.core.SubscriptionTopic.VersionAlgorithmX
	21, // 12: google.fhir.r5.core.SubscriptionTopic.name:type_name -> google.fhir.r5.core.String
	21, // 13: google.fhir.r5.core.SubscriptionTopic.title:type_name -> google.fhir.r5.core.String
	22, // 14: google.fhir.r5.core.SubscriptionTopic.derived_from:type_name -> google.fhir.r5.core.Canonical
	2,  // 15: google.fhir.r5.core.SubscriptionTopic.status:type_name -> google.fhir.r5.core.SubscriptionTopic.StatusCode
	23, // 16: google.fhir.r5.core.SubscriptionTopic.experimental:type_name -> google.fhir.r5.core.Boolean
	24, // 17: google.fhir.r5.core.SubscriptionTopic.date:type_name -> google.fhir.r5.core.DateTime
	21, // 18: google.fhir.r5.core.SubscriptionTopic.publisher:type_name -> google.fhir.r5.core.String
	25, // 19: google.fhir.r5.core.SubscriptionTopic.contact:type_name -> google.fhir.r5.core.ContactDetail
	26, // 20: google.fhir.r5.core.SubscriptionTopic.description:type_name -> google.fhir.r5.core.Markdown
	27, // 21: google.fhir.r5.core.SubscriptionTopic.use_context:type_name -> google.fhir.r5.core.UsageContext
	28, // 22: google.fhir.r5.core.SubscriptionTopic.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	26, // 23: google.fhir.r5.core.SubscriptionTopic.purpose:type_name -> google.fhir.r5.core.Markdown
	26, // 24: google.fhir.r5.core.SubscriptionTopic.copyright:type_name -> google.fhir.r5.core.Markdown
	21, // 25: google.fhir.r5.core.SubscriptionTopic.copyright_label:type_name -> google.fhir.r5.core.String
	29, // 26: google.fhir.r5.core.SubscriptionTopic.approval_date:type_name -> google.fhir.r5.core.Date
	29, // 27: google.fhir.r5.core.SubscriptionTopic.last_review_date:type_name -> google.fhir.r5.core.Date
	30, // 28: google.fhir.r5.core.SubscriptionTopic.effective_period:type_name -> google.fhir.r5.core.Period
	3,  // 29: google.fhir.r5.core.SubscriptionTopic.resource_trigger:type_name -> google.fhir.r5.core.SubscriptionTopic.ResourceTrigger
	4,  // 30: google.fhir.r5.core.SubscriptionTopic.event_trigger:type_name -> google.fhir.r5.core.SubscriptionTopic.EventTrigger
	5,  // 31: google.fhir.r5.core.SubscriptionTopic.can_filter_by:type_name -> google.fhir.r5.core.SubscriptionTopic.CanFilterBy
	6,  // 32: google.fhir.r5.core.SubscriptionTopic.notification_shape:type_name -> google.fhir.r5.core.SubscriptionTopic.NotificationShape
	21, // 33: google.fhir.r5.core.SubscriptionTopic.VersionAlgorithmX.string_value:type_name -> google.fhir.r5.core.String
	31, // 34: google.fhir.r5.core.SubscriptionTopic.VersionAlgorithmX.coding:type_name -> google.fhir.r5.core.Coding
	32, // 35: google.fhir.r5.core.SubscriptionTopic.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	21, // 36: google.fhir.r5.core.SubscriptionTopic.StatusCode.id:type_name -> google.fhir.r5.core.String
	19, // 37: google.fhir.r5.core.SubscriptionTopic.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	21, // 38: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.id:type_name -> google.fhir.r5.core.String
	19, // 39: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.extension:type_name -> google.fhir.r5.core.Extension
	19, // 40: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26, // 41: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.description:type_name -> google.fhir.r5.core.Markdown
	15, // 42: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.resource:type_name -> google.fhir.r5.core.Uri
	7,  // 43: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.supported_interaction:type_name -> google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.SupportedInteractionCode
	8,  // 44: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.query_criteria:type_name -> google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria
	21, // 45: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.fhir_path_criteria:type_name -> google.fhir.r5.core.String
	21, // 46: google.fhir.r5.core.SubscriptionTopic.EventTrigger.id:type_name -> google.fhir.r5.core.String
	19, // 47: google.fhir.r5.core.SubscriptionTopic.EventTrigger.extension:type_name -> google.fhir.r5.core.Extension
	19, // 48: google.fhir.r5.core.SubscriptionTopic.EventTrigger.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26, // 49: google.fhir.r5.core.SubscriptionTopic.EventTrigger.description:type_name -> google.fhir.r5.core.Markdown
	28, // 50: google.fhir.r5.core.SubscriptionTopic.EventTrigger.event:type_name -> google.fhir.r5.core.CodeableConcept
	15, // 51: google.fhir.r5.core.SubscriptionTopic.EventTrigger.resource:type_name -> google.fhir.r5.core.Uri
	21, // 52: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.id:type_name -> google.fhir.r5.core.String
	19, // 53: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.extension:type_name -> google.fhir.r5.core.Extension
	19, // 54: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26, // 55: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.description:type_name -> google.fhir.r5.core.Markdown
	15, // 56: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.resource:type_name -> google.fhir.r5.core.Uri
	21, // 57: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.filter_parameter:type_name -> google.fhir.r5.core.String
	15, // 58: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.filter_definition:type_name -> google.fhir.r5.core.Uri
	11, // 59: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.comparator:type_name -> google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ComparatorCode
	12, // 60: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.modifier:type_name -> google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ModifierCode
	21, // 61: google.fhir.r5.core.SubscriptionTopic.NotificationShape.id:type_name -> google.fhir.r5.core.String
	19, // 62: google.fhir.r5.core.SubscriptionTopic.NotificationShape.extension:type_name -> google.fhir.r5.core.Extension
	19, // 63: google.fhir.r5.core.SubscriptionTopic.NotificationShape.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 64: google.fhir.r5.core.SubscriptionTopic.NotificationShape.resource:type_name -> google.fhir.r5.core.Uri
	21, // 65: google.fhir.r5.core.SubscriptionTopic.NotificationShape.include:type_name -> google.fhir.r5.core.String
	21, // 66: google.fhir.r5.core.SubscriptionTopic.NotificationShape.rev_include:type_name -> google.fhir.r5.core.String
	33, // 67: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.SupportedInteractionCode.value:type_name -> google.fhir.r5.core.InteractionTriggerValueSet.Value
	21, // 68: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.SupportedInteractionCode.id:type_name -> google.fhir.r5.core.String
	19, // 69: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.SupportedInteractionCode.extension:type_name -> google.fhir.r5.core.Extension
	21, // 70: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.id:type_name -> google.fhir.r5.core.String
	19, // 71: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.extension:type_name -> google.fhir.r5.core.Extension
	19, // 72: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21, // 73: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.previous:type_name -> google.fhir.r5.core.String
	9,  // 74: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.result_for_create:type_name -> google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForCreateCode
	21, // 75: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.current:type_name -> google.fhir.r5.core.String
	10, // 76: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.result_for_delete:type_name -> google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForDeleteCode
	23, // 77: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.require_both:type_name -> google.fhir.r5.core.Boolean
	34, // 78: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForCreateCode.value:type_name -> google.fhir.r5.core.CriteriaNotExistsBehaviorCode.Value
	21, // 79: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForCreateCode.id:type_name -> google.fhir.r5.core.String
	19, // 80: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForCreateCode.extension:type_name -> google.fhir.r5.core.Extension
	34, // 81: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForDeleteCode.value:type_name -> google.fhir.r5.core.CriteriaNotExistsBehaviorCode.Value
	21, // 82: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForDeleteCode.id:type_name -> google.fhir.r5.core.String
	19, // 83: google.fhir.r5.core.SubscriptionTopic.ResourceTrigger.QueryCriteria.ResultForDeleteCode.extension:type_name -> google.fhir.r5.core.Extension
	35, // 84: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ComparatorCode.value:type_name -> google.fhir.r5.core.SearchComparatorCode.Value
	21, // 85: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	19, // 86: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	36, // 87: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ModifierCode.value:type_name -> google.fhir.r5.core.SearchModifierCode.Value
	21, // 88: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ModifierCode.id:type_name -> google.fhir.r5.core.String
	19, // 89: google.fhir.r5.core.SubscriptionTopic.CanFilterBy.ModifierCode.extension:type_name -> google.fhir.r5.core.Extension
	90, // [90:90] is the sub-list for method output_type
	90, // [90:90] is the sub-list for method input_type
	90, // [90:90] is the sub-list for extension type_name
	90, // [90:90] is the sub-list for extension extendee
	0,  // [0:90] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_VersionAlgorithmX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_ResourceTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_EventTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_CanFilterBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_NotificationShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_ResourceTrigger_SupportedInteractionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_ResourceTrigger_QueryCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForCreateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_ResourceTrigger_QueryCriteria_ResultForDeleteCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_CanFilterBy_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTopic_CanFilterBy_ModifierCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscriptionTopic_VersionAlgorithmX_StringValue)(nil),
		(*SubscriptionTopic_VersionAlgorithmX_Coding)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_subscription_topic_proto_depIdxs = nil
}
