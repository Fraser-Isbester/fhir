//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/artifact_assessment.proto

package artifact_assessment_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for ArtifactAssessment.
// Adds metadata-supported comments, classifiers or ratings related to a
// Resource. See http://hl7.org/fhir/StructureDefinition/ArtifactAssessment
type ArtifactAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Additional identifier for the artifact assessment
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// A short title for the assessment for use in displaying and selecting
	Title  *datatypes_go_proto.String  `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	CiteAs *ArtifactAssessment_CiteAsX `protobuf:"bytes,12,opt,name=cite_as,json=citeAs,proto3" json:"cite_as,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=date,proto3" json:"date,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,14,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// When the artifact assessment was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,15,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// When the artifact assessment was last reviewed by the publisher
	LastReviewDate *datatypes_go_proto.Date               `protobuf:"bytes,16,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	Artifact       *ArtifactAssessment_ArtifactX          `protobuf:"bytes,17,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Content        []*ArtifactAssessment_Content          `protobuf:"bytes,18,rep,name=content,proto3" json:"content,omitempty"`
	WorkflowStatus *ArtifactAssessment_WorkflowStatusCode `protobuf:"bytes,19,opt,name=workflow_status,json=workflowStatus,proto3" json:"workflow_status,omitempty"`
	Disposition    *ArtifactAssessment_DispositionCode    `protobuf:"bytes,20,opt,name=disposition,proto3" json:"disposition,omitempty"`
}

func (x *ArtifactAssessment) Reset() {
	*x = ArtifactAssessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment) ProtoMessage() {}

func (x *ArtifactAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactAssessment) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactAssessment) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ArtifactAssessment) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ArtifactAssessment) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ArtifactAssessment) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ArtifactAssessment) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ArtifactAssessment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ArtifactAssessment) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ArtifactAssessment) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ArtifactAssessment) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ArtifactAssessment) GetCiteAs() *ArtifactAssessment_CiteAsX {
	if x != nil {
		return x.CiteAs
	}
	return nil
}

func (x *ArtifactAssessment) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ArtifactAssessment) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ArtifactAssessment) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *ArtifactAssessment) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *ArtifactAssessment) GetArtifact() *ArtifactAssessment_ArtifactX {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ArtifactAssessment) GetContent() []*ArtifactAssessment_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ArtifactAssessment) GetWorkflowStatus() *ArtifactAssessment_WorkflowStatusCode {
	if x != nil {
		return x.WorkflowStatus
	}
	return nil
}

func (x *ArtifactAssessment) GetDisposition() *ArtifactAssessment_DispositionCode {
	if x != nil {
		return x.Disposition
	}
	return nil
}

// How to cite the comment or rating
type ArtifactAssessment_CiteAsX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ArtifactAssessment_CiteAsX_Reference
	//	*ArtifactAssessment_CiteAsX_Markdown
	Choice isArtifactAssessment_CiteAsX_Choice `protobuf_oneof:"choice"`
}

func (x *ArtifactAssessment_CiteAsX) Reset() {
	*x = ArtifactAssessment_CiteAsX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_CiteAsX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_CiteAsX) ProtoMessage() {}

func (x *ArtifactAssessment_CiteAsX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_CiteAsX.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_CiteAsX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ArtifactAssessment_CiteAsX) GetChoice() isArtifactAssessment_CiteAsX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ArtifactAssessment_CiteAsX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ArtifactAssessment_CiteAsX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ArtifactAssessment_CiteAsX) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetChoice().(*ArtifactAssessment_CiteAsX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

type isArtifactAssessment_CiteAsX_Choice interface {
	isArtifactAssessment_CiteAsX_Choice()
}

type ArtifactAssessment_CiteAsX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type ArtifactAssessment_CiteAsX_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,2,opt,name=markdown,proto3,oneof"`
}

func (*ArtifactAssessment_CiteAsX_Reference) isArtifactAssessment_CiteAsX_Choice() {}

func (*ArtifactAssessment_CiteAsX_Markdown) isArtifactAssessment_CiteAsX_Choice() {}

// The artifact assessed, commented upon or rated
type ArtifactAssessment_ArtifactX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ArtifactAssessment_ArtifactX_Reference
	//	*ArtifactAssessment_ArtifactX_Canonical
	//	*ArtifactAssessment_ArtifactX_Uri
	Choice isArtifactAssessment_ArtifactX_Choice `protobuf_oneof:"choice"`
}

func (x *ArtifactAssessment_ArtifactX) Reset() {
	*x = ArtifactAssessment_ArtifactX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_ArtifactX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_ArtifactX) ProtoMessage() {}

func (x *ArtifactAssessment_ArtifactX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_ArtifactX.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_ArtifactX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ArtifactAssessment_ArtifactX) GetChoice() isArtifactAssessment_ArtifactX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ArtifactAssessment_ArtifactX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ArtifactAssessment_ArtifactX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ArtifactAssessment_ArtifactX) GetCanonical() *datatypes_go_proto.Canonical {
	if x, ok := x.GetChoice().(*ArtifactAssessment_ArtifactX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ArtifactAssessment_ArtifactX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*ArtifactAssessment_ArtifactX_Uri); ok {
		return x.Uri
	}
	return nil
}

type isArtifactAssessment_ArtifactX_Choice interface {
	isArtifactAssessment_ArtifactX_Choice()
}

type ArtifactAssessment_ArtifactX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type ArtifactAssessment_ArtifactX_Canonical struct {
	Canonical *datatypes_go_proto.Canonical `protobuf:"bytes,2,opt,name=canonical,proto3,oneof"`
}

type ArtifactAssessment_ArtifactX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=uri,proto3,oneof"`
}

func (*ArtifactAssessment_ArtifactX_Reference) isArtifactAssessment_ArtifactX_Choice() {}

func (*ArtifactAssessment_ArtifactX_Canonical) isArtifactAssessment_ArtifactX_Choice() {}

func (*ArtifactAssessment_ArtifactX_Uri) isArtifactAssessment_ArtifactX_Choice() {}

// Comment, classifier, or rating content
type ArtifactAssessment_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	InformationType   *ArtifactAssessment_Content_InformationTypeCode `protobuf:"bytes,4,opt,name=information_type,json=informationType,proto3" json:"information_type,omitempty"`
	// Brief summary of the content
	Summary *datatypes_go_proto.Markdown `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// What type of content
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Rating, classifier, or assessment
	Classifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=classifier,proto3" json:"classifier,omitempty"`
	// Quantitative rating
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Who authored the content
	Author *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=author,proto3" json:"author,omitempty"`
	// What the comment is directed to
	Path []*datatypes_go_proto.Uri `protobuf:"bytes,10,rep,name=path,proto3" json:"path,omitempty"`
	// Additional information
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,11,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	// Acceptable to publicly share the resource content
	FreeToShare *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=free_to_share,json=freeToShare,proto3" json:"free_to_share,omitempty"`
	// Contained content
	Component []*ArtifactAssessment_Content `protobuf:"bytes,13,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *ArtifactAssessment_Content) Reset() {
	*x = ArtifactAssessment_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_Content) ProtoMessage() {}

func (x *ArtifactAssessment_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_Content.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ArtifactAssessment_Content) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetInformationType() *ArtifactAssessment_Content_InformationTypeCode {
	if x != nil {
		return x.InformationType
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetSummary() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetClassifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetPath() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetFreeToShare() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.FreeToShare
	}
	return nil
}

func (x *ArtifactAssessment_Content) GetComponent() []*ArtifactAssessment_Content {
	if x != nil {
		return x.Component
	}
	return nil
}

// submitted | triaged | waiting-for-input | resolved-no-change |
// resolved-change-required | deferred | duplicate | applied | published |
// entered-in-error
type ArtifactAssessment_WorkflowStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ArtifactAssessmentWorkflowStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ArtifactAssessmentWorkflowStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ArtifactAssessment_WorkflowStatusCode) Reset() {
	*x = ArtifactAssessment_WorkflowStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_WorkflowStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_WorkflowStatusCode) ProtoMessage() {}

func (x *ArtifactAssessment_WorkflowStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_WorkflowStatusCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_WorkflowStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ArtifactAssessment_WorkflowStatusCode) GetValue() codes_go_proto.ArtifactAssessmentWorkflowStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ArtifactAssessmentWorkflowStatusCode_Value(0)
}

func (x *ArtifactAssessment_WorkflowStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactAssessment_WorkflowStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// unresolved | not-persuasive | persuasive | persuasive-with-modification |
// not-persuasive-with-modification
type ArtifactAssessment_DispositionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ArtifactAssessmentDispositionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ArtifactAssessmentDispositionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ArtifactAssessment_DispositionCode) Reset() {
	*x = ArtifactAssessment_DispositionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_DispositionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_DispositionCode) ProtoMessage() {}

func (x *ArtifactAssessment_DispositionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_DispositionCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_DispositionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ArtifactAssessment_DispositionCode) GetValue() codes_go_proto.ArtifactAssessmentDispositionCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ArtifactAssessmentDispositionCode_Value(0)
}

func (x *ArtifactAssessment_DispositionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactAssessment_DispositionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// comment | classifier | rating | container | response | change-request
type ArtifactAssessment_Content_InformationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ArtifactAssessmentInformationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ArtifactAssessmentInformationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ArtifactAssessment_Content_InformationTypeCode) Reset() {
	*x = ArtifactAssessment_Content_InformationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAssessment_Content_InformationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAssessment_Content_InformationTypeCode) ProtoMessage() {}

func (x *ArtifactAssessment_Content_InformationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAssessment_Content_InformationTypeCode.ProtoReflect.Descriptor instead.
func (*ArtifactAssessment_Content_InformationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ArtifactAssessment_Content_InformationTypeCode) GetValue() codes_go_proto.ArtifactAssessmentInformationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ArtifactAssessmentInformationTypeCode_Value(0)
}

func (x *ArtifactAssessment_Content_InformationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactAssessment_Content_InformationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e,
	0x1d, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x48,
	0x0a, 0x07, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x69, 0x74, 0x65, 0x41, 0x73, 0x58,
	0x52, 0x06, 0x63, 0x69, 0x74, 0x65, 0x41, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x63, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xa8, 0x01, 0x0a, 0x07, 0x43, 0x69, 0x74, 0x65, 0x41, 0x73, 0x58, 0x12, 0x4e, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x58, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa0, 0x0a, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e,
	0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x53, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4f,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x1a, 0xd8, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7e, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xd5, 0x02, 0x0a, 0x12,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xcb, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x79, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42,
	0x83, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x01, 0x5a, 0x60, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_goTypes = []interface{}{
	(*ArtifactAssessment)(nil),                                      // 0: google.fhir.r5.core.ArtifactAssessment
	(*ArtifactAssessment_CiteAsX)(nil),                              // 1: google.fhir.r5.core.ArtifactAssessment.CiteAsX
	(*ArtifactAssessment_ArtifactX)(nil),                            // 2: google.fhir.r5.core.ArtifactAssessment.ArtifactX
	(*ArtifactAssessment_Content)(nil),                              // 3: google.fhir.r5.core.ArtifactAssessment.Content
	(*ArtifactAssessment_WorkflowStatusCode)(nil),                   // 4: google.fhir.r5.core.ArtifactAssessment.WorkflowStatusCode
	(*ArtifactAssessment_DispositionCode)(nil),                      // 5: google.fhir.r5.core.ArtifactAssessment.DispositionCode
	(*ArtifactAssessment_Content_InformationTypeCode)(nil),          // 6: google.fhir.r5.core.ArtifactAssessment.Content.InformationTypeCode
	(*datatypes_go_proto.Id)(nil),                                   // 7: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 8: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 9: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                 // 10: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                            // 11: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                               // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                            // 13: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 14: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                               // 15: google.fhir.r5.core.String
	(*datatypes_go_proto.DateTime)(nil),                             // 16: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Markdown)(nil),                             // 17: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Date)(nil),                                 // 18: google.fhir.r5.core.Date
	(*datatypes_go_proto.Reference)(nil),                            // 19: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Canonical)(nil),                            // 20: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 21: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Quantity)(nil),                             // 22: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.RelatedArtifact)(nil),                      // 23: google.fhir.r5.core.RelatedArtifact
	(*datatypes_go_proto.Boolean)(nil),                              // 24: google.fhir.r5.core.Boolean
	(codes_go_proto.ArtifactAssessmentWorkflowStatusCode_Value)(0),  // 25: google.fhir.r5.core.ArtifactAssessmentWorkflowStatusCode.Value
	(codes_go_proto.ArtifactAssessmentDispositionCode_Value)(0),     // 26: google.fhir.r5.core.ArtifactAssessmentDispositionCode.Value
	(codes_go_proto.ArtifactAssessmentInformationTypeCode_Value)(0), // 27: google.fhir.r5.core.ArtifactAssessmentInformationTypeCode.Value
}
var file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r5.core.ArtifactAssessment.id:type_name -> google.fhir.r5.core.Id
	8,  // 1: google.fhir.r5.core.ArtifactAssessment.meta:type_name -> google.fhir.r5.core.Meta
	9,  // 2: google.fhir.r5.core.ArtifactAssessment.implicit_rules:type_name -> google.fhir.r5.core.Uri
	10, // 3: google.fhir.r5.core.ArtifactAssessment.language:type_name -> google.fhir.r5.core.Code
	11, // 4: google.fhir.r5.core.ArtifactAssessment.text:type_name -> google.fhir.r5.core.Narrative
	12, // 5: google.fhir.r5.core.ArtifactAssessment.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r5.core.ArtifactAssessment.extension:type_name -> google.fhir.r5.core.Extension
	13, // 7: google.fhir.r5.core.ArtifactAssessment.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14, // 8: google.fhir.r5.core.ArtifactAssessment.identifier:type_name -> google.fhir.r5.core.Identifier
	15, // 9: google.fhir.r5.core.ArtifactAssessment.title:type_name -> google.fhir.r5.core.String
	1,  // 10: google.fhir.r5.core.ArtifactAssessment.cite_as:type_name -> google.fhir.r5.core.ArtifactAssessment.CiteAsX
	16, // 11: google.fhir.r5.core.ArtifactAssessment.date:type_name -> google.fhir.r5.core.DateTime
	17, // 12: google.fhir.r5.core.ArtifactAssessment.copyright:type_name -> google.fhir.r5.core.Markdown
	18, // 13: google.fhir.r5.core.ArtifactAssessment.approval_date:type_name -> google.fhir.r5.core.Date
	18, // 14: google.fhir.r5.core.ArtifactAssessment.last_review_date:type_name -> google.fhir.r5.core.Date
	2,  // 15: google.fhir.r5.core.ArtifactAssessment.artifact:type_name -> google.fhir.r5.core.ArtifactAssessment.ArtifactX
	3,  // 16: google.fhir.r5.core.ArtifactAssessment.content:type_name -> google.fhir.r5.core.ArtifactAssessment.Content
	4,  // 17: google.fhir.r5.core.ArtifactAssessment.workflow_status:type_name -> google.fhir.r5.core.ArtifactAssessment.WorkflowStatusCode
	5,  // 18: google.fhir.r5.core.ArtifactAssessment.disposition:type_name -> google.fhir.r5.core.ArtifactAssessment.DispositionCode
	19, // 19: google.fhir.r5.core.ArtifactAssessment.CiteAsX.reference:type_name -> google.fhir.r5.core.Reference
	17, // 20: google.fhir.r5.core.ArtifactAssessment.CiteAsX.markdown:type_name -> google.fhir.r5.core.Markdown
	19, // 21: google.fhir.r5.core.ArtifactAssessment.ArtifactX.reference:type_name -> google.fhir.r5.core.Reference
	20, // 22: google.fhir.r5.core.ArtifactAssessment.ArtifactX.canonical:type_name -> google.fhir.r5.core.Canonical
	9,  // 23: google.fhir.r5.core.ArtifactAssessment.ArtifactX.uri:type_name -> google.fhir.r5.core.Uri
	15, // 24: google.fhir.r5.core.ArtifactAssessment.Content.id:type_name -> google.fhir.r5.core.String
	13, // 25: google.fhir.r5.core.ArtifactAssessment.Content.extension:type_name -> google.fhir.r5.core.Extension
	13, // 26: google.fhir.r5.core.ArtifactAssessment.Content.modifier_extension:type_name -> google.fhir.r5.core.Extension
	6,  // 27: google.fhir.r5.core.ArtifactAssessment.Content.information_type:type_name -> google.fhir.r5.core.ArtifactAssessment.Content.InformationTypeCode
	17, // 28: google.fhir.r5.core.ArtifactAssessment.Content.summary:type_name -> google.fhir.r5.core.Markdown
	21, // 29: google.fhir.r5.core.ArtifactAssessment.Content.type:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 30: google.fhir.r5.core.ArtifactAssessment.Content.classifier:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 31: google.fhir.r5.core.ArtifactAssessment.Content.quantity:type_name -> google.fhir.r5.core.Quantity
	19, // 32: google.fhir.r5.core.ArtifactAssessment.Content.author:type_name -> google.fhir.r5.core.Reference
	9,  // 33: google.fhir.r5.core.ArtifactAssessment.Content.path:type_name -> google.fhir.r5.core.Uri
	23, // 34: google.fhir.r5.core.ArtifactAssessment.Content.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	24, // 35: google.fhir.r5.core.ArtifactAssessment.Content.free_to_share:type_name -> google.fhir.r5.core.Boolean
	3,  // 36: google.fhir.r5.core.ArtifactAssessment.Content.component:type_name -> google.fhir.r5.core.ArtifactAssessment.Content
	25, // 37: google.fhir.r5.core.ArtifactAssessment.WorkflowStatusCode.value:type_name -> google.fhir.r5.core.ArtifactAssessmentWorkflowStatusCode.Value
	15, // 38: google.fhir.r5.core.ArtifactAssessment.WorkflowStatusCode.id:type_name -> google.fhir.r5.core.String
	13, // 39: google.fhir.r5.core.ArtifactAssessment.WorkflowStatusCode.extension:type_name -> google.fhir.r5.core.Extension
	26, // 40: google.fhir.r5.core.ArtifactAssessment.DispositionCode.value:type_name -> google.fhir.r5.core.ArtifactAssessmentDispositionCode.Value
	15, // 41: google.fhir.r5.core.ArtifactAssessment.DispositionCode.id:type_name -> google.fhir.r5.core.String
	13, // 42: google.fhir.r5.core.ArtifactAssessment.DispositionCode.extension:type_name -> google.fhir.r5.core.Extension
	27, // 43: google.fhir.r5.core.ArtifactAssessment.Content.InformationTypeCode.value:type_name -> google.fhir.r5.core.ArtifactAssessmentInformationTypeCode.Value
	15, // 44: google.fhir.r5.core.ArtifactAssessment.Content.InformationTypeCode.id:type_name -> google.fhir.r5.core.String
	13, // 45: google.fhir.r5.core.ArtifactAssessment.Content.InformationTypeCode.extension:type_name -> google.fhir.r5.core.Extension
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_CiteAsX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_ArtifactX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_WorkflowStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_DispositionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAssessment_Content_InformationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ArtifactAssessment_CiteAsX_Reference)(nil),
		(*ArtifactAssessment_CiteAsX_Markdown)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ArtifactAssessment_ArtifactX_Reference)(nil),
		(*ArtifactAssessment_ArtifactX_Canonical)(nil),
		(*ArtifactAssessment_ArtifactX_Uri)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_artifact_assessment_proto_depIdxs = nil
}
