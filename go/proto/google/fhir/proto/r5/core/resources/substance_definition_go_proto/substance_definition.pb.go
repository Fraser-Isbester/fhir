//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/substance_definition.proto

package substance_definition_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubstanceDefinition.
// The detailed description of a substance, typically at a level beyond what is
// used for prescribing. See
// http://hl7.org/fhir/StructureDefinition/SubstanceDefinition
type SubstanceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier by which this substance is known
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// A business level version identifier of the substance
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Status of substance within the catalogue e.g. active, retired
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// A categorization, high level e.g. polymer or nucleic acid, or food,
	// chemical, biological, or lower e.g. polymer linear or branch chain, or type
	// of impurity
	Classification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=classification,proto3" json:"classification,omitempty"`
	// If the substance applies to human or veterinary use
	Domain *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=domain,proto3" json:"domain,omitempty"`
	// The quality standard, established benchmark, to which substance complies
	// (e.g. USP/NF, BP)
	Grade []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=grade,proto3" json:"grade,omitempty"`
	// Textual description of the substance
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	// Supporting literature
	InformationSource []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// Textual comment about the substance's catalogue or registry record
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,18,rep,name=note,proto3" json:"note,omitempty"`
	// The entity that creates, makes, produces or fabricates the substance
	Manufacturer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// An entity that is the source for the substance. It may be different from
	// the manufacturer
	Supplier         []*datatypes_go_proto.Reference         `protobuf:"bytes,20,rep,name=supplier,proto3" json:"supplier,omitempty"`
	Moiety           []*SubstanceDefinition_Moiety           `protobuf:"bytes,21,rep,name=moiety,proto3" json:"moiety,omitempty"`
	Characterization []*SubstanceDefinition_Characterization `protobuf:"bytes,22,rep,name=characterization,proto3" json:"characterization,omitempty"`
	Property         []*SubstanceDefinition_Property         `protobuf:"bytes,23,rep,name=property,proto3" json:"property,omitempty"`
	// General information detailing this substance
	ReferenceInformation *datatypes_go_proto.Reference          `protobuf:"bytes,24,opt,name=reference_information,json=referenceInformation,proto3" json:"reference_information,omitempty"`
	MolecularWeight      []*SubstanceDefinition_MolecularWeight `protobuf:"bytes,25,rep,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
	Structure            *SubstanceDefinition_Structure         `protobuf:"bytes,26,opt,name=structure,proto3" json:"structure,omitempty"`
	Code                 []*SubstanceDefinition_CodeType        `protobuf:"bytes,27,rep,name=code,proto3" json:"code,omitempty"`
	Name                 []*SubstanceDefinition_Name            `protobuf:"bytes,28,rep,name=name,proto3" json:"name,omitempty"`
	Relationship         []*SubstanceDefinition_Relationship    `protobuf:"bytes,29,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// Data items specific to nucleic acids
	NucleicAcid *datatypes_go_proto.Reference `protobuf:"bytes,30,opt,name=nucleic_acid,json=nucleicAcid,proto3" json:"nucleic_acid,omitempty"`
	// Data items specific to polymers
	Polymer *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=polymer,proto3" json:"polymer,omitempty"`
	// Data items specific to proteins
	Protein        *datatypes_go_proto.Reference       `protobuf:"bytes,32,opt,name=protein,proto3" json:"protein,omitempty"`
	SourceMaterial *SubstanceDefinition_SourceMaterial `protobuf:"bytes,33,opt,name=source_material,json=sourceMaterial,proto3" json:"source_material,omitempty"`
}

func (x *SubstanceDefinition) Reset() {
	*x = SubstanceDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition) ProtoMessage() {}

func (x *SubstanceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0}
}

func (x *SubstanceDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubstanceDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubstanceDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubstanceDefinition) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubstanceDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SubstanceDefinition) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceDefinition) GetClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *SubstanceDefinition) GetDomain() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SubstanceDefinition) GetGrade() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *SubstanceDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubstanceDefinition) GetInformationSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.InformationSource
	}
	return nil
}

func (x *SubstanceDefinition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SubstanceDefinition) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *SubstanceDefinition) GetSupplier() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Supplier
	}
	return nil
}

func (x *SubstanceDefinition) GetMoiety() []*SubstanceDefinition_Moiety {
	if x != nil {
		return x.Moiety
	}
	return nil
}

func (x *SubstanceDefinition) GetCharacterization() []*SubstanceDefinition_Characterization {
	if x != nil {
		return x.Characterization
	}
	return nil
}

func (x *SubstanceDefinition) GetProperty() []*SubstanceDefinition_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *SubstanceDefinition) GetReferenceInformation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReferenceInformation
	}
	return nil
}

func (x *SubstanceDefinition) GetMolecularWeight() []*SubstanceDefinition_MolecularWeight {
	if x != nil {
		return x.MolecularWeight
	}
	return nil
}

func (x *SubstanceDefinition) GetStructure() *SubstanceDefinition_Structure {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *SubstanceDefinition) GetCode() []*SubstanceDefinition_CodeType {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SubstanceDefinition) GetName() []*SubstanceDefinition_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceDefinition) GetRelationship() []*SubstanceDefinition_Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *SubstanceDefinition) GetNucleicAcid() *datatypes_go_proto.Reference {
	if x != nil {
		return x.NucleicAcid
	}
	return nil
}

func (x *SubstanceDefinition) GetPolymer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Polymer
	}
	return nil
}

func (x *SubstanceDefinition) GetProtein() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *SubstanceDefinition) GetSourceMaterial() *SubstanceDefinition_SourceMaterial {
	if x != nil {
		return x.SourceMaterial
	}
	return nil
}

// Moiety, for structural modifications
type SubstanceDefinition_Moiety struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role that the moiety is playing
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Identifier by which this moiety substance is known
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Textual name for this moiety substance
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Stereochemistry type
	Stereochemistry *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=stereochemistry,proto3" json:"stereochemistry,omitempty"`
	// Optical activity type
	OpticalActivity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=optical_activity,json=opticalActivity,proto3" json:"optical_activity,omitempty"`
	// Molecular formula for this moiety (e.g. with the Hill system)
	MolecularFormula *datatypes_go_proto.String          `protobuf:"bytes,9,opt,name=molecular_formula,json=molecularFormula,proto3" json:"molecular_formula,omitempty"`
	Amount           *SubstanceDefinition_Moiety_AmountX `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	// The measurement type of the quantitative value
	MeasurementType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=measurement_type,json=measurementType,proto3" json:"measurement_type,omitempty"`
}

func (x *SubstanceDefinition_Moiety) Reset() {
	*x = SubstanceDefinition_Moiety{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Moiety) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Moiety) ProtoMessage() {}

func (x *SubstanceDefinition_Moiety) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Moiety.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Moiety) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubstanceDefinition_Moiety) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetStereochemistry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Stereochemistry
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetOpticalActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OpticalActivity
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetMolecularFormula() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormula
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetAmount() *SubstanceDefinition_Moiety_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SubstanceDefinition_Moiety) GetMeasurementType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MeasurementType
	}
	return nil
}

// General specifications for this substance
type SubstanceDefinition_Characterization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The method used to find the characterization e.g. HPLC
	Technique *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=technique,proto3" json:"technique,omitempty"`
	// Describes the nature of the chemical entity and explains, for instance,
	// whether this is a base or a salt form
	Form *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=form,proto3" json:"form,omitempty"`
	// The description or justification in support of the interpretation of the
	// data file
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The data produced by the analytical instrument or a pictorial
	// representation of that data. Examples: a JCAMP, JDX, or ADX file, or a
	// chromatogram or spectrum analysis
	File []*datatypes_go_proto.Attachment `protobuf:"bytes,7,rep,name=file,proto3" json:"file,omitempty"`
}

func (x *SubstanceDefinition_Characterization) Reset() {
	*x = SubstanceDefinition_Characterization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Characterization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Characterization) ProtoMessage() {}

func (x *SubstanceDefinition_Characterization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Characterization.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Characterization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubstanceDefinition_Characterization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetTechnique() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Technique
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubstanceDefinition_Characterization) GetFile() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.File
	}
	return nil
}

// General specifications for this substance
type SubstanceDefinition_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code expressing the type of property
	Type  *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *SubstanceDefinition_Property_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SubstanceDefinition_Property) Reset() {
	*x = SubstanceDefinition_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Property) ProtoMessage() {}

func (x *SubstanceDefinition_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Property.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SubstanceDefinition_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_Property) GetValue() *SubstanceDefinition_Property_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// The average mass of a molecule of a compound
type SubstanceDefinition_MolecularWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The method by which the weight was determined
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// Type of molecular weight e.g. exact, average, weight average
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Used to capture quantitative values for a variety of elements
	Amount *datatypes_go_proto.Quantity `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubstanceDefinition_MolecularWeight) Reset() {
	*x = SubstanceDefinition_MolecularWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_MolecularWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_MolecularWeight) ProtoMessage() {}

func (x *SubstanceDefinition_MolecularWeight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_MolecularWeight.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_MolecularWeight) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SubstanceDefinition_MolecularWeight) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_MolecularWeight) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_MolecularWeight) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_MolecularWeight) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *SubstanceDefinition_MolecularWeight) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_MolecularWeight) GetAmount() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Structural information
type SubstanceDefinition_Structure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Stereochemistry type
	Stereochemistry *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=stereochemistry,proto3" json:"stereochemistry,omitempty"`
	// Optical activity type
	OpticalActivity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=optical_activity,json=opticalActivity,proto3" json:"optical_activity,omitempty"`
	// An expression which states the number and type of atoms present in a
	// molecule of a substance
	MolecularFormula *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=molecular_formula,json=molecularFormula,proto3" json:"molecular_formula,omitempty"`
	// Specified per moiety according to the Hill system
	MolecularFormulaByMoiety *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=molecular_formula_by_moiety,json=molecularFormulaByMoiety,proto3" json:"molecular_formula_by_moiety,omitempty"`
	// The molecular weight or weight range
	MolecularWeight *SubstanceDefinition_MolecularWeight `protobuf:"bytes,8,opt,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
	// The method used to find the structure e.g. X-ray, NMR
	Technique []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=technique,proto3" json:"technique,omitempty"`
	// Source of information for the structure
	SourceDocument []*datatypes_go_proto.Reference                 `protobuf:"bytes,10,rep,name=source_document,json=sourceDocument,proto3" json:"source_document,omitempty"`
	Representation []*SubstanceDefinition_Structure_Representation `protobuf:"bytes,11,rep,name=representation,proto3" json:"representation,omitempty"`
}

func (x *SubstanceDefinition_Structure) Reset() {
	*x = SubstanceDefinition_Structure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Structure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Structure) ProtoMessage() {}

func (x *SubstanceDefinition_Structure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Structure.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Structure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SubstanceDefinition_Structure) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetStereochemistry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Stereochemistry
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetOpticalActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OpticalActivity
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetMolecularFormula() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormula
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetMolecularFormulaByMoiety() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormulaByMoiety
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetMolecularWeight() *SubstanceDefinition_MolecularWeight {
	if x != nil {
		return x.MolecularWeight
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetTechnique() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Technique
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetSourceDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SourceDocument
	}
	return nil
}

func (x *SubstanceDefinition_Structure) GetRepresentation() []*SubstanceDefinition_Structure_Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

// Codes associated with the substance
type SubstanceDefinition_CodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The specific code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Status of the code assignment, for example 'provisional', 'approved'
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the code status was changed
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Any comment can be provided in this field
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,7,rep,name=note,proto3" json:"note,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceDefinition_CodeType) Reset() {
	*x = SubstanceDefinition_CodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_CodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_CodeType) ProtoMessage() {}

func (x *SubstanceDefinition_CodeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_CodeType.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_CodeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SubstanceDefinition_CodeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SubstanceDefinition_CodeType) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// Names applicable to this substance
type SubstanceDefinition_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The actual name
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Name type e.g. 'systematic',  'scientific, 'brand'
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The status of the name e.g. 'current', 'proposed'
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// If this is the preferred name for this substance
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,7,opt,name=preferred,proto3" json:"preferred,omitempty"`
	// Human language that the name is written in
	Language []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=language,proto3" json:"language,omitempty"`
	// The use context of this name e.g. as an active ingredient or as a food
	// colour additive
	Domain []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=domain,proto3" json:"domain,omitempty"`
	// The jurisdiction where this name applies
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// A synonym of this particular name, by which the substance is also known
	Synonym []*SubstanceDefinition_Name `protobuf:"bytes,11,rep,name=synonym,proto3" json:"synonym,omitempty"`
	// A translation for this name into another human language
	Translation []*SubstanceDefinition_Name          `protobuf:"bytes,12,rep,name=translation,proto3" json:"translation,omitempty"`
	Official    []*SubstanceDefinition_Name_Official `protobuf:"bytes,13,rep,name=official,proto3" json:"official,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceDefinition_Name) Reset() {
	*x = SubstanceDefinition_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Name) ProtoMessage() {}

func (x *SubstanceDefinition_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Name.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 6}
}

func (x *SubstanceDefinition_Name) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetLanguage() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetDomain() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetSynonym() []*SubstanceDefinition_Name {
	if x != nil {
		return x.Synonym
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetTranslation() []*SubstanceDefinition_Name {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetOfficial() []*SubstanceDefinition_Name_Official {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *SubstanceDefinition_Name) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// A link between this substance and another
type SubstanceDefinition_Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension   []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	SubstanceDefinition *SubstanceDefinition_Relationship_SubstanceDefinitionX `protobuf:"bytes,4,opt,name=substance_definition,json=substanceDefinition,proto3" json:"substance_definition,omitempty"`
	// For example "salt to parent", "active moiety"
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// For example where an enzyme strongly bonds with a particular substance,
	// this is a defining relationship for that enzyme, out of several possible
	// relationships
	IsDefining *datatypes_go_proto.Boolean               `protobuf:"bytes,6,opt,name=is_defining,json=isDefining,proto3" json:"is_defining,omitempty"`
	Amount     *SubstanceDefinition_Relationship_AmountX `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// For use when the numeric has an uncertain range
	RatioHighLimitAmount *datatypes_go_proto.Ratio `protobuf:"bytes,8,opt,name=ratio_high_limit_amount,json=ratioHighLimitAmount,proto3" json:"ratio_high_limit_amount,omitempty"`
	// An operator for the amount, for example "average", "approximately", "less
	// than"
	Comparator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceDefinition_Relationship) Reset() {
	*x = SubstanceDefinition_Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Relationship) ProtoMessage() {}

func (x *SubstanceDefinition_Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Relationship.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Relationship) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 7}
}

func (x *SubstanceDefinition_Relationship) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetSubstanceDefinition() *SubstanceDefinition_Relationship_SubstanceDefinitionX {
	if x != nil {
		return x.SubstanceDefinition
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetIsDefining() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsDefining
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetAmount() *SubstanceDefinition_Relationship_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetRatioHighLimitAmount() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.RatioHighLimitAmount
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetComparator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *SubstanceDefinition_Relationship) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// Material or taxonomic/anatomical source
type SubstanceDefinition_SourceMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Classification of the origin of the raw material. e.g. cat hair is an
	// Animal source type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The genus of an organism e.g. the Latin epithet of the plant/animal
	// scientific name
	Genus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=genus,proto3" json:"genus,omitempty"`
	// The species of an organism e.g. the Latin epithet of the species of the
	// plant/animal
	Species *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=species,proto3" json:"species,omitempty"`
	// An anatomical origin of the source material within an organism
	Part *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=part,proto3" json:"part,omitempty"`
	// The country or countries where the material is harvested
	CountryOfOrigin []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
}

func (x *SubstanceDefinition_SourceMaterial) Reset() {
	*x = SubstanceDefinition_SourceMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_SourceMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_SourceMaterial) ProtoMessage() {}

func (x *SubstanceDefinition_SourceMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_SourceMaterial.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_SourceMaterial) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SubstanceDefinition_SourceMaterial) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetGenus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Genus
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetSpecies() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetPart() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *SubstanceDefinition_SourceMaterial) GetCountryOfOrigin() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CountryOfOrigin
	}
	return nil
}

// Quantitative value for this moiety
type SubstanceDefinition_Moiety_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*SubstanceDefinition_Moiety_AmountX_Quantity
	//	*SubstanceDefinition_Moiety_AmountX_StringValue
	Choice isSubstanceDefinition_Moiety_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceDefinition_Moiety_AmountX) Reset() {
	*x = SubstanceDefinition_Moiety_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Moiety_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Moiety_AmountX) ProtoMessage() {}

func (x *SubstanceDefinition_Moiety_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Moiety_AmountX.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Moiety_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *SubstanceDefinition_Moiety_AmountX) GetChoice() isSubstanceDefinition_Moiety_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceDefinition_Moiety_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Moiety_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceDefinition_Moiety_AmountX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Moiety_AmountX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSubstanceDefinition_Moiety_AmountX_Choice interface {
	isSubstanceDefinition_Moiety_AmountX_Choice()
}

type SubstanceDefinition_Moiety_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SubstanceDefinition_Moiety_AmountX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SubstanceDefinition_Moiety_AmountX_Quantity) isSubstanceDefinition_Moiety_AmountX_Choice() {}

func (*SubstanceDefinition_Moiety_AmountX_StringValue) isSubstanceDefinition_Moiety_AmountX_Choice() {
}

// A value for the property
type SubstanceDefinition_Property_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*SubstanceDefinition_Property_ValueX_CodeableConcept
	//	*SubstanceDefinition_Property_ValueX_Quantity
	//	*SubstanceDefinition_Property_ValueX_Date
	//	*SubstanceDefinition_Property_ValueX_Boolean
	//	*SubstanceDefinition_Property_ValueX_Attachment
	Choice isSubstanceDefinition_Property_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceDefinition_Property_ValueX) Reset() {
	*x = SubstanceDefinition_Property_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Property_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Property_ValueX) ProtoMessage() {}

func (x *SubstanceDefinition_Property_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Property_ValueX.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Property_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *SubstanceDefinition_Property_ValueX) GetChoice() isSubstanceDefinition_Property_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceDefinition_Property_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Property_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *SubstanceDefinition_Property_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Property_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceDefinition_Property_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Property_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *SubstanceDefinition_Property_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Property_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *SubstanceDefinition_Property_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Property_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isSubstanceDefinition_Property_ValueX_Choice interface {
	isSubstanceDefinition_Property_ValueX_Choice()
}

type SubstanceDefinition_Property_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type SubstanceDefinition_Property_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type SubstanceDefinition_Property_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type SubstanceDefinition_Property_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type SubstanceDefinition_Property_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,5,opt,name=attachment,proto3,oneof"`
}

func (*SubstanceDefinition_Property_ValueX_CodeableConcept) isSubstanceDefinition_Property_ValueX_Choice() {
}

func (*SubstanceDefinition_Property_ValueX_Quantity) isSubstanceDefinition_Property_ValueX_Choice() {}

func (*SubstanceDefinition_Property_ValueX_Date) isSubstanceDefinition_Property_ValueX_Choice() {}

func (*SubstanceDefinition_Property_ValueX_Boolean) isSubstanceDefinition_Property_ValueX_Choice() {}

func (*SubstanceDefinition_Property_ValueX_Attachment) isSubstanceDefinition_Property_ValueX_Choice() {
}

// A depiction of the structure of the substance
type SubstanceDefinition_Structure_Representation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kind of structural representation (e.g. full, partial)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The structural representation as a text string in a standard format
	Representation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=representation,proto3" json:"representation,omitempty"`
	// The format of the representation e.g. InChI, SMILES, MOLFILE (note: not
	// the physical file format)
	Format *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	// An attachment with the structural representation e.g. a structure
	// graphic or AnIML file
	Document *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *SubstanceDefinition_Structure_Representation) Reset() {
	*x = SubstanceDefinition_Structure_Representation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Structure_Representation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Structure_Representation) ProtoMessage() {}

func (x *SubstanceDefinition_Structure_Representation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Structure_Representation.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Structure_Representation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *SubstanceDefinition_Structure_Representation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetRepresentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetFormat() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *SubstanceDefinition_Structure_Representation) GetDocument() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Document
	}
	return nil
}

// Details of the official nature of this name
type SubstanceDefinition_Name_Official struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Which authority uses this official name
	Authority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The status of the official name, for example 'draft', 'active'
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Date of official name change
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *SubstanceDefinition_Name_Official) Reset() {
	*x = SubstanceDefinition_Name_Official{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Name_Official) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Name_Official) ProtoMessage() {}

func (x *SubstanceDefinition_Name_Official) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Name_Official.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Name_Official) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *SubstanceDefinition_Name_Official) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceDefinition_Name_Official) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceDefinition_Name_Official) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceDefinition_Name_Official) GetAuthority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *SubstanceDefinition_Name_Official) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceDefinition_Name_Official) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

// A pointer to another substance, as a resource or a representational code
type SubstanceDefinition_Relationship_SubstanceDefinitionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*SubstanceDefinition_Relationship_SubstanceDefinitionX_Reference
	//	*SubstanceDefinition_Relationship_SubstanceDefinitionX_CodeableConcept
	Choice isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceDefinition_Relationship_SubstanceDefinitionX) Reset() {
	*x = SubstanceDefinition_Relationship_SubstanceDefinitionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Relationship_SubstanceDefinitionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Relationship_SubstanceDefinitionX) ProtoMessage() {}

func (x *SubstanceDefinition_Relationship_SubstanceDefinitionX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Relationship_SubstanceDefinitionX.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Relationship_SubstanceDefinitionX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (m *SubstanceDefinition_Relationship_SubstanceDefinitionX) GetChoice() isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceDefinition_Relationship_SubstanceDefinitionX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Relationship_SubstanceDefinitionX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *SubstanceDefinition_Relationship_SubstanceDefinitionX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Relationship_SubstanceDefinitionX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice interface {
	isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice()
}

type SubstanceDefinition_Relationship_SubstanceDefinitionX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type SubstanceDefinition_Relationship_SubstanceDefinitionX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*SubstanceDefinition_Relationship_SubstanceDefinitionX_Reference) isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice() {
}

func (*SubstanceDefinition_Relationship_SubstanceDefinitionX_CodeableConcept) isSubstanceDefinition_Relationship_SubstanceDefinitionX_Choice() {
}

// A numeric factor for the relationship, e.g. that a substance salt has
// some percentage of active substance in relation to some other
type SubstanceDefinition_Relationship_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*SubstanceDefinition_Relationship_AmountX_Quantity
	//	*SubstanceDefinition_Relationship_AmountX_Ratio
	//	*SubstanceDefinition_Relationship_AmountX_StringValue
	Choice isSubstanceDefinition_Relationship_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceDefinition_Relationship_AmountX) Reset() {
	*x = SubstanceDefinition_Relationship_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceDefinition_Relationship_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceDefinition_Relationship_AmountX) ProtoMessage() {}

func (x *SubstanceDefinition_Relationship_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceDefinition_Relationship_AmountX.ProtoReflect.Descriptor instead.
func (*SubstanceDefinition_Relationship_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (m *SubstanceDefinition_Relationship_AmountX) GetChoice() isSubstanceDefinition_Relationship_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceDefinition_Relationship_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Relationship_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceDefinition_Relationship_AmountX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Relationship_AmountX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *SubstanceDefinition_Relationship_AmountX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubstanceDefinition_Relationship_AmountX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSubstanceDefinition_Relationship_AmountX_Choice interface {
	isSubstanceDefinition_Relationship_AmountX_Choice()
}

type SubstanceDefinition_Relationship_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SubstanceDefinition_Relationship_AmountX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof"`
}

type SubstanceDefinition_Relationship_AmountX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SubstanceDefinition_Relationship_AmountX_Quantity) isSubstanceDefinition_Relationship_AmountX_Choice() {
}

func (*SubstanceDefinition_Relationship_AmountX_Ratio) isSubstanceDefinition_Relationship_AmountX_Choice() {
}

func (*SubstanceDefinition_Relationship_AmountX_StringValue) isSubstanceDefinition_Relationship_AmountX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_substance_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8e, 0x4d, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x6d, 0x6f,
	0x69, 0x65, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x69,
	0x65, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x15, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x23, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1d,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x5d, 0x0a, 0x0c, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69,
	0x64, 0x52, 0x0b, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x12, 0x50,
	0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x1a, 0x93, 0x07, 0x0a, 0x06, 0x4d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63,
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x4f, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x69, 0x65, 0x74,
	0x79, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc0, 0x03, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xb1, 0x05,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0x82, 0x03, 0x0a, 0x0f, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xe1, 0x0a, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x4f,
	0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x11, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x5a, 0x0a, 0x1b, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x62,
	0x79, 0x5f, 0x6d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x42, 0x79, 0x4d,
	0x6f, 0x69, 0x65, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x6c, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x60,
	0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x69, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdc, 0x03, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x82, 0x04, 0x0a, 0x08, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0xb2, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x12, 0x4f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x08, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0xae, 0x09, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x7d, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x55, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x14, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0xd6, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x59, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x13, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x07, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x8c, 0x04, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x70, 0x61,
	0x72, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x42, 0x84, 0x01, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_goTypes = []interface{}{
	(*SubstanceDefinition)(nil),                                   // 0: google.fhir.r5.core.SubstanceDefinition
	(*SubstanceDefinition_Moiety)(nil),                            // 1: google.fhir.r5.core.SubstanceDefinition.Moiety
	(*SubstanceDefinition_Characterization)(nil),                  // 2: google.fhir.r5.core.SubstanceDefinition.Characterization
	(*SubstanceDefinition_Property)(nil),                          // 3: google.fhir.r5.core.SubstanceDefinition.Property
	(*SubstanceDefinition_MolecularWeight)(nil),                   // 4: google.fhir.r5.core.SubstanceDefinition.MolecularWeight
	(*SubstanceDefinition_Structure)(nil),                         // 5: google.fhir.r5.core.SubstanceDefinition.Structure
	(*SubstanceDefinition_CodeType)(nil),                          // 6: google.fhir.r5.core.SubstanceDefinition.CodeType
	(*SubstanceDefinition_Name)(nil),                              // 7: google.fhir.r5.core.SubstanceDefinition.Name
	(*SubstanceDefinition_Relationship)(nil),                      // 8: google.fhir.r5.core.SubstanceDefinition.Relationship
	(*SubstanceDefinition_SourceMaterial)(nil),                    // 9: google.fhir.r5.core.SubstanceDefinition.SourceMaterial
	(*SubstanceDefinition_Moiety_AmountX)(nil),                    // 10: google.fhir.r5.core.SubstanceDefinition.Moiety.AmountX
	(*SubstanceDefinition_Property_ValueX)(nil),                   // 11: google.fhir.r5.core.SubstanceDefinition.Property.ValueX
	(*SubstanceDefinition_Structure_Representation)(nil),          // 12: google.fhir.r5.core.SubstanceDefinition.Structure.Representation
	(*SubstanceDefinition_Name_Official)(nil),                     // 13: google.fhir.r5.core.SubstanceDefinition.Name.Official
	(*SubstanceDefinition_Relationship_SubstanceDefinitionX)(nil), // 14: google.fhir.r5.core.SubstanceDefinition.Relationship.SubstanceDefinitionX
	(*SubstanceDefinition_Relationship_AmountX)(nil),              // 15: google.fhir.r5.core.SubstanceDefinition.Relationship.AmountX
	(*datatypes_go_proto.Id)(nil),                                 // 16: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                               // 17: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                // 18: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                               // 19: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                          // 20: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                             // 21: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                          // 22: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                         // 23: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                             // 24: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                    // 25: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Markdown)(nil),                           // 26: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Reference)(nil),                          // 27: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Annotation)(nil),                         // 28: google.fhir.r5.core.Annotation
	(*datatypes_go_proto.Attachment)(nil),                         // 29: google.fhir.r5.core.Attachment
	(*datatypes_go_proto.Quantity)(nil),                           // 30: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.DateTime)(nil),                           // 31: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Boolean)(nil),                            // 32: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Ratio)(nil),                              // 33: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.Date)(nil),                               // 34: google.fhir.r5.core.Date
}
var file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_depIdxs = []int32{
	16,  // 0: google.fhir.r5.core.SubstanceDefinition.id:type_name -> google.fhir.r5.core.Id
	17,  // 1: google.fhir.r5.core.SubstanceDefinition.meta:type_name -> google.fhir.r5.core.Meta
	18,  // 2: google.fhir.r5.core.SubstanceDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	19,  // 3: google.fhir.r5.core.SubstanceDefinition.language:type_name -> google.fhir.r5.core.Code
	20,  // 4: google.fhir.r5.core.SubstanceDefinition.text:type_name -> google.fhir.r5.core.Narrative
	21,  // 5: google.fhir.r5.core.SubstanceDefinition.contained:type_name -> google.protobuf.Any
	22,  // 6: google.fhir.r5.core.SubstanceDefinition.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 7: google.fhir.r5.core.SubstanceDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	23,  // 8: google.fhir.r5.core.SubstanceDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	24,  // 9: google.fhir.r5.core.SubstanceDefinition.version:type_name -> google.fhir.r5.core.String
	25,  // 10: google.fhir.r5.core.SubstanceDefinition.status:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 11: google.fhir.r5.core.SubstanceDefinition.classification:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 12: google.fhir.r5.core.SubstanceDefinition.domain:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 13: google.fhir.r5.core.SubstanceDefinition.grade:type_name -> google.fhir.r5.core.CodeableConcept
	26,  // 14: google.fhir.r5.core.SubstanceDefinition.description:type_name -> google.fhir.r5.core.Markdown
	27,  // 15: google.fhir.r5.core.SubstanceDefinition.information_source:type_name -> google.fhir.r5.core.Reference
	28,  // 16: google.fhir.r5.core.SubstanceDefinition.note:type_name -> google.fhir.r5.core.Annotation
	27,  // 17: google.fhir.r5.core.SubstanceDefinition.manufacturer:type_name -> google.fhir.r5.core.Reference
	27,  // 18: google.fhir.r5.core.SubstanceDefinition.supplier:type_name -> google.fhir.r5.core.Reference
	1,   // 19: google.fhir.r5.core.SubstanceDefinition.moiety:type_name -> google.fhir.r5.core.SubstanceDefinition.Moiety
	2,   // 20: google.fhir.r5.core.SubstanceDefinition.characterization:type_name -> google.fhir.r5.core.SubstanceDefinition.Characterization
	3,   // 21: google.fhir.r5.core.SubstanceDefinition.property:type_name -> google.fhir.r5.core.SubstanceDefinition.Property
	27,  // 22: google.fhir.r5.core.SubstanceDefinition.reference_information:type_name -> google.fhir.r5.core.Reference
	4,   // 23: google.fhir.r5.core.SubstanceDefinition.molecular_weight:type_name -> google.fhir.r5.core.SubstanceDefinition.MolecularWeight
	5,   // 24: google.fhir.r5.core.SubstanceDefinition.structure:type_name -> google.fhir.r5.core.SubstanceDefinition.Structure
	6,   // 25: google.fhir.r5.core.SubstanceDefinition.code:type_name -> google.fhir.r5.core.SubstanceDefinition.CodeType
	7,   // 26: google.fhir.r5.core.SubstanceDefinition.name:type_name -> google.fhir.r5.core.SubstanceDefinition.Name
	8,   // 27: google.fhir.r5.core.SubstanceDefinition.relationship:type_name -> google.fhir.r5.core.SubstanceDefinition.Relationship
	27,  // 28: google.fhir.r5.core.SubstanceDefinition.nucleic_acid:type_name -> google.fhir.r5.core.Reference
	27,  // 29: google.fhir.r5.core.SubstanceDefinition.polymer:type_name -> google.fhir.r5.core.Reference
	27,  // 30: google.fhir.r5.core.SubstanceDefinition.protein:type_name -> google.fhir.r5.core.Reference
	9,   // 31: google.fhir.r5.core.SubstanceDefinition.source_material:type_name -> google.fhir.r5.core.SubstanceDefinition.SourceMaterial
	24,  // 32: google.fhir.r5.core.SubstanceDefinition.Moiety.id:type_name -> google.fhir.r5.core.String
	22,  // 33: google.fhir.r5.core.SubstanceDefinition.Moiety.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 34: google.fhir.r5.core.SubstanceDefinition.Moiety.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 35: google.fhir.r5.core.SubstanceDefinition.Moiety.role:type_name -> google.fhir.r5.core.CodeableConcept
	23,  // 36: google.fhir.r5.core.SubstanceDefinition.Moiety.identifier:type_name -> google.fhir.r5.core.Identifier
	24,  // 37: google.fhir.r5.core.SubstanceDefinition.Moiety.name:type_name -> google.fhir.r5.core.String
	25,  // 38: google.fhir.r5.core.SubstanceDefinition.Moiety.stereochemistry:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 39: google.fhir.r5.core.SubstanceDefinition.Moiety.optical_activity:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 40: google.fhir.r5.core.SubstanceDefinition.Moiety.molecular_formula:type_name -> google.fhir.r5.core.String
	10,  // 41: google.fhir.r5.core.SubstanceDefinition.Moiety.amount:type_name -> google.fhir.r5.core.SubstanceDefinition.Moiety.AmountX
	25,  // 42: google.fhir.r5.core.SubstanceDefinition.Moiety.measurement_type:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 43: google.fhir.r5.core.SubstanceDefinition.Characterization.id:type_name -> google.fhir.r5.core.String
	22,  // 44: google.fhir.r5.core.SubstanceDefinition.Characterization.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 45: google.fhir.r5.core.SubstanceDefinition.Characterization.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 46: google.fhir.r5.core.SubstanceDefinition.Characterization.technique:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 47: google.fhir.r5.core.SubstanceDefinition.Characterization.form:type_name -> google.fhir.r5.core.CodeableConcept
	26,  // 48: google.fhir.r5.core.SubstanceDefinition.Characterization.description:type_name -> google.fhir.r5.core.Markdown
	29,  // 49: google.fhir.r5.core.SubstanceDefinition.Characterization.file:type_name -> google.fhir.r5.core.Attachment
	24,  // 50: google.fhir.r5.core.SubstanceDefinition.Property.id:type_name -> google.fhir.r5.core.String
	22,  // 51: google.fhir.r5.core.SubstanceDefinition.Property.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 52: google.fhir.r5.core.SubstanceDefinition.Property.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 53: google.fhir.r5.core.SubstanceDefinition.Property.type:type_name -> google.fhir.r5.core.CodeableConcept
	11,  // 54: google.fhir.r5.core.SubstanceDefinition.Property.value:type_name -> google.fhir.r5.core.SubstanceDefinition.Property.ValueX
	24,  // 55: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.id:type_name -> google.fhir.r5.core.String
	22,  // 56: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 57: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 58: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.method:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 59: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.type:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 60: google.fhir.r5.core.SubstanceDefinition.MolecularWeight.amount:type_name -> google.fhir.r5.core.Quantity
	24,  // 61: google.fhir.r5.core.SubstanceDefinition.Structure.id:type_name -> google.fhir.r5.core.String
	22,  // 62: google.fhir.r5.core.SubstanceDefinition.Structure.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 63: google.fhir.r5.core.SubstanceDefinition.Structure.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 64: google.fhir.r5.core.SubstanceDefinition.Structure.stereochemistry:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 65: google.fhir.r5.core.SubstanceDefinition.Structure.optical_activity:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 66: google.fhir.r5.core.SubstanceDefinition.Structure.molecular_formula:type_name -> google.fhir.r5.core.String
	24,  // 67: google.fhir.r5.core.SubstanceDefinition.Structure.molecular_formula_by_moiety:type_name -> google.fhir.r5.core.String
	4,   // 68: google.fhir.r5.core.SubstanceDefinition.Structure.molecular_weight:type_name -> google.fhir.r5.core.SubstanceDefinition.MolecularWeight
	25,  // 69: google.fhir.r5.core.SubstanceDefinition.Structure.technique:type_name -> google.fhir.r5.core.CodeableConcept
	27,  // 70: google.fhir.r5.core.SubstanceDefinition.Structure.source_document:type_name -> google.fhir.r5.core.Reference
	12,  // 71: google.fhir.r5.core.SubstanceDefinition.Structure.representation:type_name -> google.fhir.r5.core.SubstanceDefinition.Structure.Representation
	24,  // 72: google.fhir.r5.core.SubstanceDefinition.CodeType.id:type_name -> google.fhir.r5.core.String
	22,  // 73: google.fhir.r5.core.SubstanceDefinition.CodeType.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 74: google.fhir.r5.core.SubstanceDefinition.CodeType.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 75: google.fhir.r5.core.SubstanceDefinition.CodeType.code:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 76: google.fhir.r5.core.SubstanceDefinition.CodeType.status:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 77: google.fhir.r5.core.SubstanceDefinition.CodeType.status_date:type_name -> google.fhir.r5.core.DateTime
	28,  // 78: google.fhir.r5.core.SubstanceDefinition.CodeType.note:type_name -> google.fhir.r5.core.Annotation
	27,  // 79: google.fhir.r5.core.SubstanceDefinition.CodeType.source:type_name -> google.fhir.r5.core.Reference
	24,  // 80: google.fhir.r5.core.SubstanceDefinition.Name.id:type_name -> google.fhir.r5.core.String
	22,  // 81: google.fhir.r5.core.SubstanceDefinition.Name.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 82: google.fhir.r5.core.SubstanceDefinition.Name.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24,  // 83: google.fhir.r5.core.SubstanceDefinition.Name.name:type_name -> google.fhir.r5.core.String
	25,  // 84: google.fhir.r5.core.SubstanceDefinition.Name.type:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 85: google.fhir.r5.core.SubstanceDefinition.Name.status:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 86: google.fhir.r5.core.SubstanceDefinition.Name.preferred:type_name -> google.fhir.r5.core.Boolean
	25,  // 87: google.fhir.r5.core.SubstanceDefinition.Name.language:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 88: google.fhir.r5.core.SubstanceDefinition.Name.domain:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 89: google.fhir.r5.core.SubstanceDefinition.Name.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	7,   // 90: google.fhir.r5.core.SubstanceDefinition.Name.synonym:type_name -> google.fhir.r5.core.SubstanceDefinition.Name
	7,   // 91: google.fhir.r5.core.SubstanceDefinition.Name.translation:type_name -> google.fhir.r5.core.SubstanceDefinition.Name
	13,  // 92: google.fhir.r5.core.SubstanceDefinition.Name.official:type_name -> google.fhir.r5.core.SubstanceDefinition.Name.Official
	27,  // 93: google.fhir.r5.core.SubstanceDefinition.Name.source:type_name -> google.fhir.r5.core.Reference
	24,  // 94: google.fhir.r5.core.SubstanceDefinition.Relationship.id:type_name -> google.fhir.r5.core.String
	22,  // 95: google.fhir.r5.core.SubstanceDefinition.Relationship.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 96: google.fhir.r5.core.SubstanceDefinition.Relationship.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14,  // 97: google.fhir.r5.core.SubstanceDefinition.Relationship.substance_definition:type_name -> google.fhir.r5.core.SubstanceDefinition.Relationship.SubstanceDefinitionX
	25,  // 98: google.fhir.r5.core.SubstanceDefinition.Relationship.type:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 99: google.fhir.r5.core.SubstanceDefinition.Relationship.is_defining:type_name -> google.fhir.r5.core.Boolean
	15,  // 100: google.fhir.r5.core.SubstanceDefinition.Relationship.amount:type_name -> google.fhir.r5.core.SubstanceDefinition.Relationship.AmountX
	33,  // 101: google.fhir.r5.core.SubstanceDefinition.Relationship.ratio_high_limit_amount:type_name -> google.fhir.r5.core.Ratio
	25,  // 102: google.fhir.r5.core.SubstanceDefinition.Relationship.comparator:type_name -> google.fhir.r5.core.CodeableConcept
	27,  // 103: google.fhir.r5.core.SubstanceDefinition.Relationship.source:type_name -> google.fhir.r5.core.Reference
	24,  // 104: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.id:type_name -> google.fhir.r5.core.String
	22,  // 105: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 106: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 107: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.type:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 108: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.genus:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 109: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.species:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 110: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.part:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 111: google.fhir.r5.core.SubstanceDefinition.SourceMaterial.country_of_origin:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 112: google.fhir.r5.core.SubstanceDefinition.Moiety.AmountX.quantity:type_name -> google.fhir.r5.core.Quantity
	24,  // 113: google.fhir.r5.core.SubstanceDefinition.Moiety.AmountX.string_value:type_name -> google.fhir.r5.core.String
	25,  // 114: google.fhir.r5.core.SubstanceDefinition.Property.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 115: google.fhir.r5.core.SubstanceDefinition.Property.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	34,  // 116: google.fhir.r5.core.SubstanceDefinition.Property.ValueX.date:type_name -> google.fhir.r5.core.Date
	32,  // 117: google.fhir.r5.core.SubstanceDefinition.Property.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	29,  // 118: google.fhir.r5.core.SubstanceDefinition.Property.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	24,  // 119: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.id:type_name -> google.fhir.r5.core.String
	22,  // 120: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 121: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 122: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.type:type_name -> google.fhir.r5.core.CodeableConcept
	24,  // 123: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.representation:type_name -> google.fhir.r5.core.String
	25,  // 124: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.format:type_name -> google.fhir.r5.core.CodeableConcept
	27,  // 125: google.fhir.r5.core.SubstanceDefinition.Structure.Representation.document:type_name -> google.fhir.r5.core.Reference
	24,  // 126: google.fhir.r5.core.SubstanceDefinition.Name.Official.id:type_name -> google.fhir.r5.core.String
	22,  // 127: google.fhir.r5.core.SubstanceDefinition.Name.Official.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 128: google.fhir.r5.core.SubstanceDefinition.Name.Official.modifier_extension:type_name -> google.fhir.r5.core.Extension
	25,  // 129: google.fhir.r5.core.SubstanceDefinition.Name.Official.authority:type_name -> google.fhir.r5.core.CodeableConcept
	25,  // 130: google.fhir.r5.core.SubstanceDefinition.Name.Official.status:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 131: google.fhir.r5.core.SubstanceDefinition.Name.Official.date:type_name -> google.fhir.r5.core.DateTime
	27,  // 132: google.fhir.r5.core.SubstanceDefinition.Relationship.SubstanceDefinitionX.reference:type_name -> google.fhir.r5.core.Reference
	25,  // 133: google.fhir.r5.core.SubstanceDefinition.Relationship.SubstanceDefinitionX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 134: google.fhir.r5.core.SubstanceDefinition.Relationship.AmountX.quantity:type_name -> google.fhir.r5.core.Quantity
	33,  // 135: google.fhir.r5.core.SubstanceDefinition.Relationship.AmountX.ratio:type_name -> google.fhir.r5.core.Ratio
	24,  // 136: google.fhir.r5.core.SubstanceDefinition.Relationship.AmountX.string_value:type_name -> google.fhir.r5.core.String
	137, // [137:137] is the sub-list for method output_type
	137, // [137:137] is the sub-list for method input_type
	137, // [137:137] is the sub-list for extension type_name
	137, // [137:137] is the sub-list for extension extendee
	0,   // [0:137] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_substance_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Moiety); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Characterization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_MolecularWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Structure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_CodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_SourceMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Moiety_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Property_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Structure_Representation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Name_Official); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Relationship_SubstanceDefinitionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceDefinition_Relationship_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SubstanceDefinition_Moiety_AmountX_Quantity)(nil),
		(*SubstanceDefinition_Moiety_AmountX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SubstanceDefinition_Property_ValueX_CodeableConcept)(nil),
		(*SubstanceDefinition_Property_ValueX_Quantity)(nil),
		(*SubstanceDefinition_Property_ValueX_Date)(nil),
		(*SubstanceDefinition_Property_ValueX_Boolean)(nil),
		(*SubstanceDefinition_Property_ValueX_Attachment)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SubstanceDefinition_Relationship_SubstanceDefinitionX_Reference)(nil),
		(*SubstanceDefinition_Relationship_SubstanceDefinitionX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SubstanceDefinition_Relationship_AmountX_Quantity)(nil),
		(*SubstanceDefinition_Relationship_AmountX_Ratio)(nil),
		(*SubstanceDefinition_Relationship_AmountX_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_substance_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_substance_definition_proto_depIdxs = nil
}
